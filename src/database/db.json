{
  "questions": [
    {
      "id": "c72b3240-2b3e-4540-9791-09dcc9ae1c9f",
      "__typename": "Question",
      "answer": "An async function always returns a promise. The await still has to wait for the promise to resolve: a pending promise gets returned when we call getData() in order to set data equal to it.\\n\\nIf we wanted to get access to the resolved value \"\"I made it\"\", we could have used the .then() method on data:\\n\\ndata.then(res => console.log(res))\\n\\nThis would've logged \"\"I made it!\"\"",
      "code": "async function getData() {\\n  return await Promise.resolve('I made it!');\\n}\\n\\nconst data = getData();\\nconsole.log(data);",
      "correctOption": 2,
      "createdAt": "2023-06-26T13:46:47.645Z",
      "options": [
        {
          "S": "\"I made it!\""
        },
        {
          "S": "Promise {<resolved>: \"I made it!\"}"
        },
        {
          "S": "Promise {<pending>}"
        },
        {
          "S": "undefined"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:46:47.645Z"
    },
    {
      "id": "82528751-ed1c-47da-8544-ed3544117821",
      "__typename": "Question",
      "answer": "With the + operator, you can concatenate strings. In this case, we are concatenating the string \"\"🥑\"\" with the string \"\"💻\"\", resulting in \"\"🥑💻\"\".\\n\\n",
      "code": "console.log('🥑' + '💻');",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:45:06.792Z",
      "options": [
        {
          "S": "\"🥑💻\""
        },
        {
          "S": "257548"
        },
        {
          "S": "A string containing their code points"
        },
        {
          "S": "Error"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:45:06.792Z"
    },
    {
      "id": "e413e995-c10e-478f-bb57-e5ea334a40ce",
      "__typename": "Question",
      "answer": "With the optional chaining operator ?., we no longer have to explicitly check whether the deeper nested values are valid or not. If we're trying to access a property on an undefined or null value (nullish), the expression short-circuits and returns undefined.\\n\\nperson.pet?.name: person has a property named pet: person.pet is not nullish. It has a property called name, and returns Mara. person.pet?.family?.name: person has a property named pet: person.pet is not nullish. pet does not have a property called family, person.pet.family is nullish. The expression returns undefined. person.getFullName?.(): person has a property named getFullName: person.getFullName() is not nullish and can get invoked, which returns Lydia Hallie. member.getLastName?.(): variable member is non existent therefore a ReferenceError gets thrown!",
      "code": "const person = {\\n  firstName: 'Lydia',\\n  lastName: 'Hallie',\\n  pet: {\\n    name: 'Mara',\\n    breed: 'Dutch Tulip Hound',\\n  },\\n  getFullName() {\\n    return `${this.firstName} ${this.lastName}`;\\n  },\\n};\\n\\nconsole.log(person.pet?.name);\\nconsole.log(person.pet?.family?.name);\\nconsole.log(person.getFullName?.());\\nconsole.log(member.getLastName?.());",
      "correctOption": 1,
      "createdAt": "2023-06-28T14:15:17.256Z",
      "options": [
        {
          "S": "undefined undefined undefined undefined"
        },
        {
          "S": "Mara undefined Lydia Hallie ReferenceError"
        },
        {
          "S": "Mara null Lydia Hallie null"
        },
        {
          "S": "null ReferenceError null ReferenceError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:15:17.256Z"
    },
    {
      "id": "eb40dc1b-fc4e-4fe5-8a69-f6052e0976eb",
      "__typename": "Question",
      "answer": "The sayHi function returns the returned value of the immediately invoked function expression (IIFE). This function returned 0, which is type \"\"number\"\".  FYI: typeof can return the following list of values: undefined, boolean, number, bigint, string, symbol, function and object. Question that typeof null returns \"\"object\"\".",
      "code": "function sayHi() {\\n  return (() => 0)();\\n}\\n\\nconsole.log(typeof sayHi());",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:08:13.065Z",
      "options": [
        {
          "S": "\"object\""
        },
        {
          "S": "\"number\""
        },
        {
          "S": "\"function\""
        },
        {
          "S": "\"undefined\""
        }
      ],
      "points": 10,
      "question": "With both, we can pass the object to which we want the this keyword to refer to. However, .call is also executed immediately!  .bind. returns a copy of the function, but with a bound context! It is not executed immediately.",
      "updatedAt": "2023-06-26T13:08:13.065Z"
    },
    {
      "id": "291e83aa-f434-42dd-be82-e33a54312e49",
      "__typename": "Question",
      "answer": "During the capturing phase, the event goes through the ancestor elements down to the target element. It then reaches the target element, and bubbling begins.",
      "code": "",
      "correctOption": 3,
      "createdAt": "2023-06-26T10:39:06.112Z",
      "options": [
        {
          "S": "A: Target > Capturing > Bubbling"
        },
        {
          "S": "B: Bubbling > Target > Capturing"
        },
        {
          "S": "C: Target > Bubbling > Capturing"
        },
        {
          "S": "D: Capturing > Target > Bubbling"
        }
      ],
      "points": 10,
      "question": " What are the three phases of event propagation?",
      "updatedAt": "2023-06-26T10:39:06.112Z"
    },
    {
      "id": "40ef5c73-b36d-4183-9d0e-68bbdf5b8c05",
      "__typename": "Question",
      "answer": "With \"\"use strict\"\", you can make sure that you don't accidentally declare global variables. We never declared the variable age, and since we use \"\"use strict\"\", it will throw a reference error. If we didn't use \"\"use strict\"\", it would have worked, since the property age would have gotten added to the global object.\\n\\n    ",
      "code": "function getAge() {\\n      'use strict';\\n      age = 21;\\n      console.log(age);\\n    }\\n    \\n    getAge();",
      "correctOption": 2,
      "createdAt": "2023-06-26T10:39:06.133Z",
      "options": [
        {
          "S": "21"
        },
        {
          "S": "undefined"
        },
        {
          "S": "ReferenceError"
        },
        {
          "S": "TypeError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T10:39:06.133Z"
    },
    {
      "id": "ab777bd7-e9d5-47de-a21f-88cc213ca064",
      "__typename": "Question",
      "answer": "There are 8 falsy values:\\n\\nundefined\\nnull\\nNaN\\nfalse\\n'' (empty string)\\n0\\n-0\\n0n (BigInt(0))\\nFunction constructors, like new Number and new Boolean are truthy.",
      "code": "0;\\nnew Number(0);\\n('');\\n(' ');\\nnew Boolean(false);\\nundefined;",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:23:49.548Z",
      "options": [
        {
          "S": "0, '', undefined"
        },
        {
          "S": "0, new Number(0), '', new Boolean(false), undefined"
        },
        {
          "S": "0, '', new Boolean(false), undefined"
        },
        {
          "S": "All of them are falsy"
        }
      ],
      "points": 10,
      "question": "Which of these values are falsy?",
      "updatedAt": "2023-06-26T13:23:49.548Z"
    },
    {
      "id": "d16747c6-7571-4a03-a4a2-368e8847301a",
      "__typename": "Question",
      "answer": "In order to get a character at a specific index of a string, you can use bracket notation. The first character in the string has index 0, and so on. In this case, we want to get the element with index 0, the character \"\"I', which gets logged.\\n\\nQuestion that this method is not supported in IE7 and below. In that case, use .charAt().",
      "code": "console.log('I want pizza'[0]);",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:54:48.356Z",
      "options": [
        {
          "S": "\"\"\""
        },
        {
          "S": "\"I\""
        },
        {
          "S": "SyntaxError"
        },
        {
          "S": "undefined"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:54:48.356Z"
    },
    {
      "id": "5536ccd8-c3f9-4c82-8ac1-1e2b368ac4d9",
      "__typename": "Question",
      "answer": "typeof 1 returns \"\"number\"\". typeof \"\"number\"\" returns \"\"string\"\"",
      "code": "console.log(typeof typeof 1);",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:24:17.507Z",
      "options": [
        {
          "S": "\"number\""
        },
        {
          "S": "\"string\""
        },
        {
          "S": "\"object\""
        },
        {
          "S": "\"undefined\""
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:24:17.507Z"
    },
    {
      "id": "f993e0e7-2acf-422d-ae21-4948df51c313",
      "__typename": "Question",
      "answer": "It's possible to combine objects using the spread operator .... It lets you create copies of the key/value pairs of one object, and add them to another object. In this case, we create copies of the user object, and add them to the admin object. The admin object now contains the copied key/value pairs, which results in { admin: true, name: \"\"Lydia\"\", age: 21 }.",
      "code": "const user = { name: 'Lydia', age: 21 };\\nconst admin = { admin: true, ...user };\\n\\nconsole.log(admin);",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:39:44.310Z",
      "options": [
        {
          "S": "{ admin: true, user: { name: \"Lydia\", age: 21 } }"
        },
        {
          "S": "{ admin: true, name: \"Lydia\", age: 21 }"
        },
        {
          "S": "{ admin: true, user: [\"Lydia\", 21] }"
        },
        {
          "S": "{ admin: true }"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:39:44.310Z"
    },
    {
      "id": "324f59be-b62e-4d7e-8637-d265fa896a18",
      "__typename": "Question",
      "answer": "A Symbol is not enumerable. The Object.keys method returns all enumerable key properties on an object. The Symbol won't be visible, and an empty array is returned. When logging the entire object, all properties will be visible, even non-enumerable ones.\\n\\nThis is one of the many qualities of a symbol: besides representing an entirely unique value (which prevents accidental name collision on objects, for example when working with 2 libraries that want to add properties to the same object), you can also \"\"hide\"\" properties on objects this way (although not entirely. You can still access symbols using the Object.getOwnPropertySymbols() method).",
      "code": "const info = {\\n  [Symbol('a')]: 'b',\\n};\\n\\nconsole.log(info);\\nconsole.log(Object.keys(info));",
      "correctOption": 3,
      "createdAt": "2023-06-26T13:59:36.851Z",
      "options": [
        {
          "S": "{Symbol('a'): 'b'} and [\"{Symbol('a')\"]"
        },
        {
          "S": "{} and []"
        },
        {
          "S": "{ a: \"b\" } and [\"a\"]"
        },
        {
          "S": "{Symbol('a'): 'b'} and []"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:59:36.851Z"
    },
    {
      "id": "60aa7c64-5b09-4041-a83b-e2bd7a21dffb",
      "__typename": "Question",
      "answer": "With the Intl.NumberFormat method, we can format numeric values to any locale. We format the numeric value 130 to the en-US locale as a unit in mile-per-hour, which results in 130 mph. The numeric value 300 to the en-US locale as a currency in USD results in $300.00.",
      "code": "function getFine(speed, amount) {\\n  const formattedSpeed = new Intl.NumberFormat('en-US', {\\n    style: 'unit',\\n    unit: 'mile-per-hour'\\n  }).format(speed);\\n\\n  const formattedAmount = new Intl.NumberFormat('en-US', {\\n    style: 'currency',\\n    currency: 'USD'\\n  }).format(amount);\\n\\n  return `The driver drove ${formattedSpeed} and has to pay ${formattedAmount}`;\\n}\\n\\nconsole.log(getFine(130, 300))",
      "correctOption": 1,
      "createdAt": "2023-06-28T14:21:30.760Z",
      "options": [
        {
          "S": "The driver drove 130 and has to pay 300"
        },
        {
          "S": "The driver drove 130 mph and has to pay $300.00"
        },
        {
          "S": "The driver drove undefined and has to pay undefined"
        },
        {
          "S": "The driver drove 130.00 and has to pay 300.00"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:21:30.760Z"
    },
    {
      "id": "4f919619-fe47-4ee0-bc07-6e198f58dd10",
      "__typename": "Question",
      "answer": "null is falsy. !null returns true. !true returns false.\\n\\n\"\"\"\" is falsy. !\"\"\"\" returns true. !true returns false.\\n\\n1 is truthy. !1 returns false. !false returns true.",
      "code": "!!null;\\n!!'';\\n!!1;",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:29:07.204Z",
      "options": [
        {
          "S": "false true false"
        },
        {
          "S": "false false true"
        },
        {
          "S": "false true true"
        },
        {
          "S": "true true false"
        }
      ],
      "points": 10,
      "question": " What's the output?",
      "updatedAt": "2023-06-26T13:29:07.204Z"
    },
    {
      "id": "846e46a0-d821-4e09-a926-a4b10a9a75ea",
      "__typename": "Question",
      "answer": "The catch block receives the argument x. This is not the same x as the variable when we pass arguments. This variable x is block-scoped.\\n\\nLater, we set this block-scoped variable equal to 1, and set the value of the variable y. Now, we log the block-scoped variable x, which is equal to 1.\\n\\nOutside of the catch block, x is still undefined, and y is 2. When we want to console.log(x) outside of the catch block, it returns undefined, and y returns 2.\\n\\n",
      "code": "(() => {\\n  let x, y;\\n  try {\\n    throw new Error();\\n  } catch (x) {\\n    (x = 1), (y = 2);\\n    console.log(x);\\n  }\\n  console.log(x);\\n  console.log(y);\\n})();",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:25:32.006Z",
      "options": [
        {
          "S": "1 undefined 2"
        },
        {
          "S": "undefined undefined undefined"
        },
        {
          "S": "1 1 2"
        },
        {
          "S": "1 undefined undefined"
        }
      ],
      "points": 10,
      "question": " What's the output?",
      "updatedAt": "2023-06-26T13:25:32.006Z"
    },
    {
      "id": "f96ba7bd-9180-485c-9114-14d094e5a116",
      "__typename": "Question",
      "answer": "By using destructuring assignment syntax we can unpack values from arrays, or properties from objects, into distinct variables:\\n\\nconst { firstName } = { firstName: 'Lydia' };\\n// ES5 version:\\n// var firstName = { firstName: 'Lydia' }.firstName;\\n\\nconsole.log(firstName); // \"\"Lydia\"\"\\nAlso, a property can be unpacked from an object and assigned to a variable with a different name than the object property:\\n\\nconst { firstName: myName } = { firstName: 'Lydia' };\\n// ES5 version:\\n// var myName = { firstName: 'Lydia' }.firstName;\\n\\nconsole.log(myName); // \"\"Lydia\"\"\\nconsole.log(firstName); // Uncaught ReferenceError: firstName is not defined\\nTherefore, firstName does not exist as a variable, thus attempting to access its value will raise a ReferenceError.\\n\\nQuestion: Be aware of the global scope properties:\\n\\nconst { name: myName } = { name: 'Lydia' };\\n\\nconsole.log(myName); // \"\"lydia\"\"\\nconsole.log(name); // \"\"\"\" ----- Browser e.g. Chrome\\nconsole.log(name); // ReferenceError: name is not defined  ----- NodeJS\\nWhenever Javascript is unable to find a variable within the current scope, it climbs up the Scope chain and searches for it and if it reaches the top-level scope, aka Global scope, and still doesn't find it, it will throw a ReferenceError.\\n\\nIn Browsers such as Chrome, name is a deprecated global scope property. In this example, the code is running inside global scope and there is no user defined local variable for name, therefore it searches the predefined variables/properties in the global scope which is in case of browsers, it searches through window object and it will extract the window.name value which is equal to an empty string.\\n\\nIn NodeJS, there is no such property on the global object, thus attempting to access a non-existent variable will raise a ReferenceError.\\n\\n",
      "code": "const { firstName: myName } = { firstName: 'Lydia' };\\n\\nconsole.log(firstName);",
      "correctOption": 3,
      "createdAt": "2023-06-26T13:48:16.523Z",
      "options": [
        {
          "S": "\"Lydia\""
        },
        {
          "S": "\"myName\""
        },
        {
          "S": "undefined"
        },
        {
          "S": "ReferenceError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:48:16.523Z"
    },
    {
      "id": "28bd168a-19e7-4fc9-be43-fffc2a7c9696",
      "__typename": "Question",
      "answer": "A generator function \"\"pauses\"\" its execution when it sees the yield keyword. First, we have to let the function yield the string \"\"Do you love JavaScript?\"\", which can be done by calling game.next().value.\\n\\nEvery line is executed, until it finds the first yield keyword. There is a yield keyword on the first line within the function: the execution stops with the first yield! This means that the variable answer is not defined yet!\\n\\nWhen we call game.next(\"\"Yes\"\").value, the previous yield is replaced with the value of the parameters passed to the next() function, \"\"Yes\"\" in this case. The value of the variable answer is now equal to \"\"Yes\"\". The condition of the if-statement returns false, and JavaScript loves you back ❤️ gets logged.\\n\\n",
      "code": "function* startGame() {\\n  const answer = yield 'Do you love JavaScript?';\\n  if (answer !== 'Yes') {\\n    return \"\"Oh wow... Guess we're done here\"\";\\n  }\\n  return 'JavaScript loves you back ❤️';\\n}\\n\\nconst game = startGame();\\nconsole.log(/* 1 */); // Do you love JavaScript?\\nconsole.log(/* 2 */); // JavaScript loves you back ❤️",
      "correctOption": 2,
      "createdAt": "2023-06-26T13:45:36.081Z",
      "options": [
        {
          "S": "game.next(\"Yes\").value and game.next().value"
        },
        {
          "S": "game.next.value(\"Yes\") and game.next.value()"
        },
        {
          "S": "game.next().value and game.next(\"Yes\").value"
        },
        {
          "S": "game.next.value() and game.next.value(\"Yes\")"
        }
      ],
      "points": 10,
      "question": "How can we log the values that are commented out after the console.log statement?",
      "updatedAt": "2023-06-26T13:45:36.081Z"
    },
    {
      "id": "2c327541-93d8-4894-8589-7c5e00ed8031",
      "__typename": "Question",
      "answer": "In JavaScript, we have two ways to access properties on an object: bracket notation, or dot notation. In this example, we use dot notation (colorConfig.colors) instead of bracket notation (colorConfig[\"\"colors\"\"]).\\n\\nWith dot notation, JavaScript tries to find the property on the object with that exact name. In this example, JavaScript tries to find a property called colors on the colorConfig object. There is no property called colors, so this returns undefined. Then, we try to access the value of the first element by using [1]. We cannot do this on a value that's undefined, so it throws a TypeError: Cannot read property '1' of undefined.\\n\\nJavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket [ and keeps going until it finds the closing bracket ]. Only then, it will evaluate the statement. If we would've used colorConfig[colors[1]], it would have returned the value of the red property on the colorConfig object.",
      "code": "const colorConfig = {\\n  red: true,\\n  blue: false,\\n  green: true,\\n  black: true,\\n  yellow: false,\\n};\\n\\nconst colors = ['pink', 'red', 'blue'];\\n\\nconsole.log(colorConfig.colors[1]);",
      "correctOption": 3,
      "createdAt": "2023-06-28T14:09:23.462Z",
      "options": [
        {
          "S": "true"
        },
        {
          "S": "false"
        },
        {
          "S": "undefined"
        },
        {
          "S": "TypeError"
        }
      ],
      "points": 10,
      "question": "What's its value?",
      "updatedAt": "2023-06-28T14:09:23.462Z"
    },
    {
      "id": "6df88e48-051b-4880-820b-9a11a9c7bf24",
      "__typename": "Question",
      "answer": "Normally when we set objects equal to null, those objects get garbage collected as there is no reference anymore to that object. However, since the callback function within setInterval is an arrow function (thus bound to the config object), the callback function still holds a reference to the config object. As long as there is a reference, the object won't get garbage collected. Since this is an interval, setting config to null or delete-ing config.alert won't garbage-collect the interval, so the interval will still be called. It should be cleared with clearInterval(config.alert) to remove it from memory. Since it was not cleared, the setInterval callback function will still get invoked every 1000ms (1s).",
      "code": "let config = {\\n  alert: setInterval(() => {\\n    console.log('Alert!');\\n  }, 1000),\\n};\\n\\nconfig = null;",
      "correctOption": 2,
      "createdAt": "2023-06-28T14:13:04.120Z",
      "options": [
        {
          "S": "The setInterval callback won't be invoked"
        },
        {
          "S": "The setInterval callback gets invoked once"
        },
        {
          "S": "The setInterval callback will still be called every second"
        },
        {
          "S": "We never invoked config.alert(), config is null"
        }
      ],
      "points": 10,
      "question": "What will happen?",
      "updatedAt": "2023-06-28T14:13:04.120Z"
    },
    {
      "id": "f63253dd-b2b1-47f6-94ff-24eb762fcc2e",
      "__typename": "Question",
      "answer": "...args is a rest parameter. The rest parameter's value is an array containing all remaining arguments, and can only be the last parameter! In this example, the rest parameter was the second parameter. This is not possible, and will throw a syntax error.\\n\\nfunction getItems(fruitList, favoriteFruit, ...args) {\\n  return [...fruitList, ...args, favoriteFruit];\\n}\\n\\ngetItems(['banana', 'apple'], 'pear', 'orange');\\nThe above example works. This returns the array [ 'banana', 'apple', 'orange', 'pear' ]",
      "code": "function getItems(fruitList, ...args, favoriteFruit) {\\n  return [...fruitList, ...args, favoriteFruit]\\n}\\n\\ngetItems([\"\"banana\"\", \"\"apple\"\"], \"\"pear\"\", \"\"orange\"\")",
      "correctOption": 3,
      "createdAt": "2023-06-26T13:58:14.896Z",
      "options": [
        {
          "S": "[\"banana\", \"apple\", \"pear\", \"orange\"]"
        },
        {
          "S": "[[\"banana\", \"apple\"], \"pear\", \"orange\"]"
        },
        {
          "S": "[\"banana\", \"apple\", [\"pear\"], \"orange\"]"
        },
        {
          "S": "SyntaxError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:58:14.896Z"
    },
    {
      "id": "369466c9-4f39-4ea3-a679-b01089e2c4e2",
      "__typename": "Question",
      "answer": "Every Symbol is entirely unique. The purpose of the argument passed to the Symbol is to give the Symbol a description. The value of the Symbol is not dependent on the passed argument. As we test equality, we are creating two entirely new symbols: the first Symbol('foo'), and the second Symbol('foo'). These two values are unique and not equal to each other, Symbol('foo') === Symbol('foo') returns false.",
      "code": "console.log(Number(2) === Number(2));\\nconsole.log(Boolean(false) === Boolean(false));\\nconsole.log(Symbol('foo') === Symbol('foo'));",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:44:05.419Z",
      "options": [
        {
          "S": "true, true, false"
        },
        {
          "S": "false, true, false"
        },
        {
          "S": "true, false, true"
        },
        {
          "S": "true, true, true"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:44:05.419Z"
    },
    {
      "id": "9b177416-8561-4d3c-961f-b449789cca15",
      "__typename": "Question",
      "answer": "typeof name returns \"\"string\"\". The string \"\"string\"\" is a truthy value, so !typeof name returns the boolean value false. false === \"\"object\"\" and false === \"\"string\"\" both returnfalse.\\n\\n(If we wanted to check whether the type was (un)equal to a certain type, we should've written !== instead of !typeof)",
      "code": "const name = 'Lydia Hallie';\\n\\nconsole.log(!typeof name === 'object');\\nconsole.log(!typeof name === 'string');",
      "correctOption": 2,
      "createdAt": "2023-06-28T14:16:28.573Z",
      "options": [
        {
          "S": "false true"
        },
        {
          "S": "true false"
        },
        {
          "S": "false false"
        },
        {
          "S": "true true"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:16:28.573Z"
    },
    {
      "id": "ec64dee1-a50b-4b5c-abbc-6edd8bea19a7",
      "__typename": "Question",
      "answer": "Expressions within template literals are evaluated first. This means that the string will contain the returned value of the expression, the immediately invoked function (x => x)('I love') in this case. We pass the value 'I love' as an argument to the x => x arrow function. x is equal to 'I love', which gets returned. This results in I love to program.",
      "code": "console.log(`${(x => x)('I love')} to program`);",
      "correctOption": 0,
      "createdAt": "2023-06-28T14:12:39.945Z",
      "options": [
        {
          "S": "I love to program"
        },
        {
          "S": "undefined to program"
        },
        {
          "S": "${(x => x)('I love') to program"
        },
        {
          "S": "TypeError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:12:39.945Z"
    },
    {
      "id": "c2f19d5a-20a1-4643-8d6e-12e52be5763d",
      "__typename": "Question",
      "answer": "With both, we can pass the object to which we want the this keyword to refer to. However, .call is also executed immediately!  .bind. returns a copy of the function, but with a bound context! It is not executed immediately.",
      "code": "const person = { name: 'Lydia' };\\n\\nfunction sayHi(age) {\\n  return `${this.name} is ${age}`;\\n}\\n\\nconsole.log(sayHi.call(person, 21));\\nconsole.log(sayHi.bind(person, 21));",
      "correctOption": 3,
      "createdAt": "2023-06-26T13:07:18.197Z",
      "options": [
        {
          "S": "undefined is 21 Lydia is 21"
        },
        {
          "S": "function function"
        },
        {
          "S": "Lydia is 21 Lydia is 21"
        },
        {
          "S": "Lydia is 21 function"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:07:18.197Z"
    },
    {
      "id": "2daf4326-bd5a-4db3-aa1d-ab5b924f8d3e",
      "__typename": "Question",
      "answer": "Array elements can hold any value. Numbers, strings, objects, other arrays, null, boolean values, undefined, and other expressions such as dates, functions, and calculations.\\n\\nThe element will be equal to the returned value. 1 + 2 returns 3, 1 * 2 returns 2, and 1 / 2 returns 0.5.\\n\\n",
      "code": "const list = [1 + 2, 1 * 2, 1 / 2];\\nconsole.log(list);",
      "correctOption": 2,
      "createdAt": "2023-06-26T13:50:44.417Z",
      "options": [
        {
          "S": "[\"1 + 2\", \"1 * 2\", \"1 / 2\"]"
        },
        {
          "S": "[\"12\", 2, 0.5]"
        },
        {
          "S": "[3, 2, 0.5]"
        },
        {
          "S": "[1, 1, 1]"
        }
      ],
      "points": 10,
      "question": "What is the output?",
      "updatedAt": "2023-06-26T13:50:44.417Z"
    },
    {
      "id": "09b035bd-b68a-4ee9-9b49-041fc8c62283",
      "__typename": "Question",
      "answer": "With the spread operator ..., we can spread iterables to individual elements. The sumValues function receives three arguments: x, y and z. ...[1, 2, 3] will result in 1, 2, 3, which we pass to the sumValues function.\\n\\n",
      "code": "function sumValues(x, y, z) {\\n  return x + y + z;\\n}",
      "correctOption": 2,
      "createdAt": "2023-06-28T14:14:29.583Z",
      "options": [
        {
          "S": "sumValues([...1, 2, 3])"
        },
        {
          "S": "sumValues([...[1, 2, 3]])"
        },
        {
          "S": "sumValues(...[1, 2, 3])"
        },
        {
          "S": "sumValues([1, 2, 3])"
        }
      ],
      "points": 10,
      "question": "Which of the following options will return 6?",
      "updatedAt": "2023-06-28T14:14:29.583Z"
    },
    {
      "id": "303c79ae-9da0-44c9-8a83-640eb31be260",
      "__typename": "Question",
      "answer": "Object.freeze makes it impossible to add, remove, or modify properties of an object (unless the property's value is another object).\\n\\nWhen we create the variable shape and set it equal to the frozen object box, shape also refers to a frozen object. You can check whether an object is frozen by using Object.isFrozen. In this case, Object.isFrozen(shape) would return true, since the variable shape has a reference to a frozen object.\\n\\nSince shape is frozen, and since the value of x is not an object, we cannot modify the property x. x is still equal to 10, and { x: 10, y: 20 } gets logged.",
      "code": "const box = { x: 10, y: 20 };\\n\\nObject.freeze(box);\\n\\nconst shape = box;\\nshape.x = 100;\\n\\nconsole.log(shape);",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:47:39.655Z",
      "options": [
        {
          "S": "{ x: 100, y: 20 }"
        },
        {
          "S": "{ x: 10, y: 20 }"
        },
        {
          "S": "{ x: 100 }"
        },
        {
          "S": "ReferenceError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:47:39.655Z"
    },
    {
      "id": "68c2f04b-0439-471b-8a75-457ce545487a",
      "__typename": "Question",
      "answer": "The second argument of JSON.stringify is the replacer. The replacer can either be a function or an array, and lets you control what and how the values should be stringified.\\n\\nIf the replacer is an array, only the property names included in the array will be added to the JSON string. In this case, only the properties with the names \"\"level\"\" and \"\"health\"\" are included, \"\"username\"\" is excluded. data is now equal to \"\"{\"\"level\"\":19, \"\"health\"\":90}\"\".\\n\\nIf the replacer is a function, this function gets called on every property in the object you're stringifying. The value returned from this function will be the value of the property when it's added to the JSON string. If the value is undefined, this property is excluded from the JSON string.\\n\\n",
      "code": "const settings = {\\n  username: 'lydiahallie',\\n  level: 19,\\n  health: 90,\\n};\\n\\nconst data = JSON.stringify(settings, ['level', 'health']);\\nconsole.log(data);",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:40:52.234Z",
      "options": [
        {
          "S": "\"{\"level\":19, \"health\":90}\""
        },
        {
          "S": "\"{\"username\": \"lydiahallie\"}\""
        },
        {
          "S": "\"[\"level\", \"health\"]\""
        },
        {
          "S": "\"{\"username\": \"lydiahallie\", \"level\":19, \"health\":90}\""
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:40:52.234Z"
    },
    {
      "id": "6db31a66-ef47-4535-848b-c26bbfa49c10",
      "__typename": "Question",
      "answer": "By destructuring objects, we can unpack values from the right-hand object, and assign the unpacked value to the value of the same property name on the left-hand object. In this case, we're assigning the value \"\"💀\"\" to spookyItems[3]. This means that we're modifying the spookyItems array, we're adding the \"\"💀\"\" to it. When logging spookyItems, [\"\"👻\"\", \"\"🎃\"\", \"\"🕸\"\", \"\"💀\"\"] gets logged.",
      "code": "const spookyItems = ['👻', '🎃', '🕸'];\\n({ item: spookyItems[3] } = { item: '💀' });\\n\\nconsole.log(spookyItems);",
      "correctOption": 1,
      "createdAt": "2023-06-28T14:21:56.774Z",
      "options": [
        {
          "S": "[\"👻\", \"🎃\", \"🕸\"]"
        },
        {
          "S": "[\"👻\", \"🎃\", \"🕸\", \"💀\"]"
        },
        {
          "S": "[\"👻\", \"🎃\", \"🕸\", { item: \"💀\" }]"
        },
        {
          "S": "[\"👻\", \"🎃\", \"🕸\", \"[object Object]\"]"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:21:56.774Z"
    },
    {
      "id": "7b5164d8-df31-41b8-964f-948850a72acf",
      "__typename": "Question",
      "answer": "counterOne is an instance of the Counter class. The counter class contains a count property on its constructor, and an increment method. First, we invoked the increment method twice by calling counterOne.increment(). Currently, counterOne.count is 2.\\n\\nThen, we create a new variable counterTwo, and set it equal to counterOne. Since objects interact by reference, we're just creating a new reference to the same spot in memory that counterOne points to. Since it has the same spot in memory, any changes made to the object that counterTwo has a reference to, also apply to counterOne. Currently, counterTwo.count is 2.\\n\\nWe invoke counterTwo.increment(), which sets count to 3. Then, we log the count on counterOne, which logs 3.",
      "code": "class Counter {\\n  constructor() {\\n    this.count = 0;\\n  }\\n\\n  increment() {\\n    this.count++;\\n  }\\n}\\n\\nconst counterOne = new Counter();\\ncounterOne.increment();\\ncounterOne.increment();\\n\\nconst counterTwo = counterOne;\\ncounterTwo.increment();\\n\\nconsole.log(counterOne.count);",
      "correctOption": 3,
      "createdAt": "2023-06-28T14:24:09.978Z",
      "options": [
        {
          "S": "0"
        },
        {
          "S": "1"
        },
        {
          "S": "2"
        },
        {
          "S": "3"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:24:09.978Z"
    },
    {
      "id": "6999dd85-9613-4a8e-bd8f-9a4833d33ee5",
      "__typename": "Question",
      "answer": "// Stringifying a number into valid JSON, then parsing the JSON string to a JavaScript value:\\nconst jsonNumber = JSON.stringify(4); // '4'\\nJSON.parse(jsonNumber); // 4\\n\\n// Stringifying an array value into valid JSON, then parsing the JSON string to a JavaScript value:\\nconst jsonArray = JSON.stringify([1, 2, 3]); // '[1, 2, 3]'\\nJSON.parse(jsonArray); // [1, 2, 3]\\n\\n// Stringifying an object  into valid JSON, then parsing the JSON string to a JavaScript value:\\nconst jsonArray = JSON.stringify({ name: 'Lydia' }); // '{\"\"name\"\":\"\"Lydia\"\"}'\\nJSON.parse(jsonArray); // { name: 'Lydia' }",
      "code": "JSON.parse();",
      "correctOption": 0,
      "createdAt": "2023-06-28T14:11:14.891Z",
      "options": [
        {
          "S": "Parses JSON to a JavaScript value"
        },
        {
          "S": "Parses a JavaScript object to JSON"
        },
        {
          "S": "Parses any JavaScript value to JSON"
        },
        {
          "S": "Parses JSON to a JavaScript object only"
        }
      ],
      "points": 10,
      "question": "What does this method do?",
      "updatedAt": "2023-06-28T14:11:14.891Z"
    },
    {
      "id": "36b257b2-fc55-40dd-820b-dc2e578810e1",
      "__typename": "Question",
      "answer": "let x = (y = 10); is actually shorthand for:\\n\\ny = 10;\\nlet x = y;\\nWhen we set y equal to 10, we actually add a property y to the global object (window in browser, global in Node). In a browser, window.y is now equal to 10.\\n\\nThen, we declare a variable x with the value of y, which is 10. Variables declared with the let keyword are block scoped, they are only defined within the block they're declared in; the immediately invoked function expression (IIFE) in this case. When we use the typeof operator, the operand x is not defined: we are trying to access x outside of the block it's declared in. This means that x is not defined. Values who haven't been assigned a value or declared are of type \"\"undefined\"\". console.log(typeof x) returns \"\"undefined\"\".\\n\\nHowever, we created a global variable y when setting y equal to 10. This value is accessible anywhere in our code. y is defined, and holds a value of type \"\"number\"\". console.log(typeof y) returns \"\"number\"\".",
      "code": "(() => {\\n  let x = (y = 10);\\n})();\\n\\nconsole.log(typeof x);\\nconsole.log(typeof y);",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:36:27.233Z",
      "options": [
        {
          "S": "\"undefined\", \"number\""
        },
        {
          "S": "\"number\", \"number\""
        },
        {
          "S": "\"object\", \"number\""
        },
        {
          "S": "\"number\", \"undefined\""
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:36:27.233Z"
    },
    {
      "id": "f118a45a-fbcb-4ed2-b971-d90561485951",
      "__typename": "Question",
      "answer": "With the padStart method, we can add padding to the beginning of a string. The value passed to this method is the total length of the string together with the padding. The string \"\"Lydia Hallie\"\" has a length of 12. name.padStart(13) inserts 1 space at the start of the string, because 12 + 1 is 13.\\n\\nIf the argument passed to the padStart method is smaller than the length of the array, no padding will be added.",
      "code": "const name = 'Lydia Hallie';\\nconsole.log(name.padStart(13));\\nconsole.log(name.padStart(2));",
      "correctOption": 2,
      "createdAt": "2023-06-26T13:44:35.340Z",
      "options": [
        {
          "S": "\"Lydia Hallie\", \"Lydia Hallie\""
        },
        {
          "S": "\" Lydia Hallie\", \" Lydia Hallie\" (\"[13x whitespace]Lydia Hallie\", \"[2x whitespace]Lydia Hallie\")"
        },
        {
          "S": "\" Lydia Hallie\", \"Lydia Hallie\" (\"[1x whitespace]Lydia Hallie\", \"Lydia Hallie\")"
        },
        {
          "S": "\"Lydia Hallie\", \"Lyd\","
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:44:35.340Z"
    },
    {
      "id": "db1e2bba-dcad-4d9b-8682-350bdee0be29",
      "__typename": "Question",
      "answer": "Both the changeAge and changeAgeAndName functions have a default parameter, namely a newly created object { ...person }. This object has copies of all the key/values in the person object.\\n\\nFirst, we invoke the changeAge function and pass the person object as its argument. This function increases the value of the age property by 1. person is now { name: \"\"Lydia\"\", age: 22 }.\\n\\nThen, we invoke the changeAgeAndName function, however we don't pass a parameter. Instead, the value of x is equal to a new object: { ...person }. Since it's a new object, it doesn't affect the values of the properties on the person object. person is still equal to { name: \"\"Lydia\"\", age: 22 }.\\n\\n",
      "code": "const person = {\\n  name: 'Lydia',\\n  age: 21,\\n};\\n\\nconst changeAge = (x = { ...person }) => (x.age += 1);\\nconst changeAgeAndName = (x = { ...person }) => {\\n  x.age += 1;\\n  x.name = 'Sarah';\\n};\\n\\nchangeAge(person);\\nchangeAgeAndName();\\n\\nconsole.log(person);",
      "correctOption": 2,
      "createdAt": "2023-06-28T14:13:58.276Z",
      "options": [
        {
          "S": "{name: \"Sarah\", age: 22}"
        },
        {
          "S": "{name: \"Sarah\", age: 23}"
        },
        {
          "S": "{name: \"Lydia\", age: 22}"
        },
        {
          "S": "{name: \"Lydia\", age: 23}"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:13:58.276Z"
    },
    {
      "id": "5afb9488-5a1a-4a7b-985c-c82e77ed137e",
      "__typename": "Question",
      "answer": "A pure function is a function that always returns the same result, if the same arguments are passed.\\n\\nThe sum function always returns the same result. If we pass 1 and 2, it will always return 3 without side effects. If we pass 5 and 10, it will always return 15, and so on. This is the definition of a pure function.",
      "code": "function sum(a, b) {\\n  return a + b;\\n}",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:48:41.984Z",
      "options": [
        {
          "S": "Yes"
        },
        {
          "S": "No"
        },
        {
          "S": ""
        },
        {
          "S": ""
        }
      ],
      "points": 10,
      "question": "Is this a pure function?",
      "updatedAt": "2023-06-26T13:48:41.984Z"
    },
    {
      "id": "34e2ee52-0a62-4956-9cc3-5013093796dc",
      "__typename": "Question",
      "answer": "The unary plus tries to convert an operand to a number. true is 1, and false is 0.\\n\\n    The string 'Lydia' is a truthy value. What we're actually asking, is \"\"is this truthy value falsy?\"\". This returns false.",
      "code": "'+true; !'Lydia';",
      "correctOption": 0,
      "createdAt": "2023-06-26T10:39:06.112Z",
      "options": [
        {
          "S": "1 and false"
        },
        {
          "S": "false and NaN"
        },
        {
          "S": "false and false"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T10:39:06.112Z"
    },
    {
      "id": "10df77db-406b-4ca8-b971-40e2ec31f76e",
      "__typename": "Question",
      "answer": "In JavaScript, we don't have to write the semicolon (;) explicitly, however the JavaScript engine still adds them after statements. This is called Automatic Semicolon Insertion. A statement can for example be variables, or keywords like throw, return, break, etc.\\n\\nHere, we wrote a return statement, and another value a + b on a new line. However, since it's a new line, the engine doesn't know that it's actually the value that we wanted to return. Instead, it automatically added a semicolon after return. You could see this as:\\n\\nreturn;\\na + b;\\nThis means that a + b is never reached, since a function stops running after the return keyword. If no value gets returned, like here, the function returns undefined. Question that there is no automatic insertion after if/else statements!\\n\\n",
      "code": "function nums(a, b) {\\n  if (a > b) console.log('a is bigger');\\n  else console.log('b is bigger');\\n  return\\n  a + b;\\n}\\n\\nconsole.log(nums(4, 2));\\nconsole.log(nums(1, 2));",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:58:43.866Z",
      "options": [
        {
          "S": "a is bigger, 6 and b is bigger, 3"
        },
        {
          "S": "a is bigger, undefined and b is bigger, undefined"
        },
        {
          "S": "undefined and undefined"
        },
        {
          "S": "SyntaxError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:58:43.866Z"
    },
    {
      "id": "5b922888-348f-40b0-9ca1-d45f9a90045a",
      "__typename": "Question",
      "answer": "The value of res in the second .then is equal to the returned value of the previous .then. You can keep chaining .thens like this, where the value is passed to the next handler.\\n\\n",
      "code": "fetch('https://www.website.com/api/user/1')\\n  .then(res => res.json())\\n  .then(res => console.log(res));",
      "correctOption": 2,
      "createdAt": "2023-06-26T13:53:17.867Z",
      "options": [
        {
          "S": "The result of the fetch method."
        },
        {
          "S": "The result of the second invocation of the fetch method."
        },
        {
          "S": "The result of the callback in the previous .then()."
        },
        {
          "S": "It would always be undefined."
        }
      ],
      "points": 10,
      "question": "What kind of information would get logged?",
      "updatedAt": "2023-06-26T13:53:17.867Z"
    },
    {
      "id": "c2a29db3-e493-4d7f-9f6f-bde8bede5d4d",
      "__typename": "Question",
      "answer": "If we click p, we see two logs: p and div. During event propagation, there are 3 phases: capturing, target, and bubbling. By default, event handlers are executed in the bubbling phase (unless you set useCapture to true). It goes from the deepest nested element outwards.",
      "code": "<div onclick=\"\"console.log('div')\"\">\\n  <p onclick=\"\"console.log('p')\"\">\\n    Click here!\\n  </p>\\n</div>",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:05:52.186Z",
      "options": [
        {
          "S": "p div"
        },
        {
          "S": "div p"
        },
        {
          "S": "p"
        },
        {
          "S": "div"
        }
      ],
      "points": 10,
      "question": " When you click the paragraph, what's the logged output?",
      "updatedAt": "2023-06-26T13:05:52.186Z"
    },
    {
      "id": "da331198-c4ea-4ab5-a9b4-a71180152dca",
      "__typename": "Question",
      "answer": "JavaScript only has primitive types and objects.\\n\\nPrimitive types are boolean, null, undefined, bigint, number, string, and symbol.\\n\\nWhat differentiates a primitive from an object is that primitives do not have any properties or methods; however, you'll Question that 'foo'.toUpperCase() evaluates to 'FOO' and does not result in a TypeError. This is because when you try to access a property or method on a primitive like a string, JavaScript will implicitly wrap the primitive type using one of the wrapper classes, i.e. String, and then immediately discard the wrapper after the expression evaluates. All primitives except for null and undefined exhibit this behaviour.\\n\\n",
      "code": " ",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:26:41.615Z",
      "options": [
        {
          "S": "primitive or object"
        },
        {
          "S": "function or object"
        },
        {
          "S": "trick question! only objects"
        },
        {
          "S": "number or object"
        }
      ],
      "points": 10,
      "question": "Everything in JavaScript is either a...",
      "updatedAt": "2023-06-26T13:26:41.615Z"
    },
    {
      "id": "bf329d2a-5943-4dad-86dc-f56e75dac7a1",
      "__typename": "Question",
      "answer": "With the || operator, we can return the first truthy operand. If all values are falsy, the last operand gets returned.\\n\\n(false || {} || null): the empty object {} is a truthy value. This is the first (and only) truthy value, which gets returned. one is equal to {}.\\n\\n(null || false || \"\"\"\"): all operands are falsy values. This means that the last operand, \"\"\"\" gets returned. two is equal to \"\"\"\".\\n\\n([] || 0 || \"\"\"\"): the empty array[] is a truthy value. This is the first truthy value, which gets returned. three is equal to [].",
      "code": "const one = false || {} || null;\\nconst two = null || false || '';\\nconst three = [] || 0 || true;\\n\\nconsole.log(one, two, three);",
      "correctOption": 2,
      "createdAt": "2023-06-26T14:01:20.973Z",
      "options": [
        {
          "S": "false null []"
        },
        {
          "S": "null \"\" true"
        },
        {
          "S": "{} \"\" []"
        },
        {
          "S": "null null true"
        }
      ],
      "points": 10,
      "question": "What's the value of output?",
      "updatedAt": "2023-06-26T14:01:20.973Z"
    },
    {
      "id": "32e18ffc-2fa5-4730-9587-236aa6dcbc43",
      "__typename": "Question",
      "answer": "All objects have prototypes, except for the base object. The base object is the object created by the user, or an object that is created using the new keyword. The base object has access to some methods and properties, such as .toString. This is the reason why you can use built-in JavaScript methods! All of such methods are available on the prototype. Although JavaScript can't find it directly on your object, it goes down the prototype chain and finds it there, which makes it accessible for you.",
      "code": "",
      "correctOption": 1,
      "createdAt": "2023-06-26T10:39:06.139Z",
      "options": [
        {
          "S": "true"
        },
        {
          "S": "false"
        }
      ],
      "points": 10,
      "question": " All object have prototypes.",
      "updatedAt": "2023-06-26T10:39:06.139Z"
    },
    {
      "id": "f8810a56-e570-4b79-9f38-37da3430a240",
      "__typename": "Question",
      "answer": "In JavaScript, all object keys are strings (unless it's a Symbol). Even though we might not type them as strings, they are always converted into strings under the hood.\\n\\n    JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket [ and keeps going until it finds the closing bracket ]. Only then, it will evaluate the statement.\\n    \\n    mouse[bird.size]: First it evaluates bird.size, which is \"\"small\"\". mouse[\"\"small\"\"] returns true\\n    \\n    However, with dot notation, this doesn't happen. mouse does not have a key called bird, which means that mouse.bird is undefined. Then, we ask for the size using dot notation: mouse.bird.size. Since mouse.bird is undefined, we're actually asking undefined.size. This isn't valid, and will throw an error similar to Cannot read property \"\"size\"\" of undefined.",
      "code": "const bird = {\\n      size: \"\"small\"\"\\n    };\\n    \\n    const mouse = {\\n      name: \"\"Mickey\"\",\\n      small: true\\n    };",
      "correctOption": 0,
      "createdAt": "2023-06-26T10:39:06.152Z",
      "options": [
        {
          "S": "mouse.bird.size is not valid"
        },
        {
          "S": "mouse[bird.size] is not valid"
        },
        {
          "S": "mouse[bird['size']] is not valid"
        },
        {
          "S": "All of them are valid"
        }
      ],
      "points": 10,
      "question": "Which one is true?",
      "updatedAt": "2023-06-26T10:39:06.152Z"
    },
    {
      "id": "6f4f73b0-0fcf-4f75-b3d7-7f6b162491ab",
      "__typename": "Question",
      "answer": "Regular functions, such as the giveLydiaPizza function, have a prototype property, which is an object (prototype object) with a constructor property. Arrow functions however, such as the giveLydiaChocolate function, do not have this prototype property. undefined gets returned when trying to access the prototype property using giveLydiaChocolate.prototype.\\n\\n",
      "code": "function giveLydiaPizza() {\\n  return 'Here is pizza!';\\n}\\n\\nconst giveLydiaChocolate = () =>\\n  \"\"Here's chocolate... now go hit the gym already.\"\";\\n\\nconsole.log(giveLydiaPizza.prototype);\\nconsole.log(giveLydiaChocolate.prototype);",
      "correctOption": 3,
      "createdAt": "2023-06-26T13:57:16.782Z",
      "options": [
        {
          "S": "{ constructor: ...} { constructor: ...}"
        },
        {
          "S": "{} { constructor: ...}"
        },
        {
          "S": "{ constructor: ...} {}"
        },
        {
          "S": "{ constructor: ...} undefined"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:57:16.782Z"
    },
    {
      "id": "e49b0308-b7a4-4030-af06-b880da39d72b",
      "__typename": "Question",
      "answer": "With the flat method, we can create a new, flattened array. The depth of the flattened array depends on the value that we pass. In this case, we passed the value 1 (which we didn't have to, that's the default value), meaning that only the arrays on the first depth will be concatenated. ['🥑'] and ['✨', '✨', ['🍕', '🍕']] in this case. Concatenating these two arrays results in ['🥑', '✨', '✨', ['🍕', '🍕']].\\n\\n",
      "code": "const emojis = ['🥑', ['✨', '✨', ['🍕', '🍕']]];\\n\\nconsole.log(emojis.flat(1));",
      "correctOption": 1,
      "createdAt": "2023-06-28T14:23:35.975Z",
      "options": [
        {
          "S": "['🥑', ['✨', '✨', ['🍕', '🍕']]]"
        },
        {
          "S": "['🥑', '✨', '✨', ['🍕', '🍕']]"
        },
        {
          "S": "['🥑', ['✨', '✨', '🍕', '🍕']]"
        },
        {
          "S": "['🥑', '✨', '✨', '🍕', '🍕']"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:23:35.975Z"
    },
    {
      "id": "dffbe042-2fa1-4a38-af8e-fac6dcef1f07",
      "__typename": "Question",
      "answer": "An imported module is read-only: you cannot modify the imported module. Only the module that exports them can change its value.\\n\\nWhen we try to increment the value of myCounter, it throws an error: myCounter is read-only and cannot be modified.",
      "code": "// counter.js\\nlet counter = 10;\\nexport default counter;\\n// index.js\\nimport myCounter from './counter';\\n\\nmyCounter += 1;\\n\\nconsole.log(myCounter);\\n",
      "correctOption": 2,
      "createdAt": "2023-06-26T13:38:00.904Z",
      "options": [
        {
          "S": "10"
        },
        {
          "S": "11"
        },
        {
          "S": "Error"
        },
        {
          "S": "NaN"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:38:00.904Z"
    },
    {
      "id": "311966da-b7fe-4979-9117-4fac3f3a9671",
      "__typename": "Question",
      "answer": "The add function is a memoized function. With memoization, we can cache the results of a function in order to speed up its execution. In this case, we create a cache object that stores the previously returned values.\\n\\nIf we call the addFunction function again with the same argument, it first checks whether it has already gotten that value in its cache. If that's the case, the caches value will be returned, which saves on execution time. Else, if it's not cached, it will calculate the value and store it afterwards.\\n\\nWe call the addFunction function three times with the same value: on the first invocation, the value of the function when num is equal to 10 isn't cached yet. The condition of the if-statement num in cache returns false, and the else block gets executed: Calculated! 20 gets logged, and the value of the result gets added to the cache object. cache now looks like { 10: 20 }.\\n\\nThe second time, the cache object contains the value that gets returned for 10. The condition of the if-statement num in cache returns true, and 'From cache! 20' gets logged.\\n\\nThe third time, we pass 5 * 2 to the function which gets evaluated to 10. The cache object contains the value that gets returned for 10. The condition of the if-statement num in cache returns true, and 'From cache! 20' gets logged.",
      "code": "const add = () => {\\n  const cache = {};\\n  return num => {\\n    if (num in cache) {\\n      return `From cache! ${cache[num]}`;\\n    } else {\\n      const result = num + 10;\\n      cache[num] = result;\\n      return `Calculated! ${result}`;\\n    }\\n  };\\n};\\n\\nconst addFunction = add();\\nconsole.log(addFunction(10));\\nconsole.log(addFunction(10));\\nconsole.log(addFunction(5 * 2));",
      "correctOption": 2,
      "createdAt": "2023-06-26T13:49:34.919Z",
      "options": [
        {
          "S": "Calculated! 20 Calculated! 20 Calculated! 20"
        },
        {
          "S": "Calculated! 20 From cache! 20 Calculated! 20"
        },
        {
          "S": "Calculated! 20 From cache! 20 From cache! 20"
        },
        {
          "S": "Calculated! 20 From cache! 20 Error"
        }
      ],
      "points": 10,
      "question": "What is the output?",
      "updatedAt": "2023-06-26T13:49:34.919Z"
    },
    {
      "id": "94e0bf94-73ec-4003-ab35-df6ecd319ed2",
      "__typename": "Question",
      "answer": "The getList function receives an array as its argument. Between the parentheses of the getList function, we destructure this array right away. You could see this as:\\n\\n[x, ...y] = [1, 2, 3, 4]\\n\\nWith the rest parameter ...y, we put all \"\"remaining\"\" arguments in an array. The remaining arguments are 2, 3 and 4 in this case. The value of y is an array, containing all the rest parameters. The value of x is equal to 1 in this case, so when we log [x, y], [1, [2, 3, 4]] gets logged.\\n\\nThe getUser function receives an object. With arrow functions, we don't have to write curly brackets if we just return one value. However, if you want to instantly return an object from an arrow function, you have to write it between parentheses, otherwise everything between the two braces will be interpreted as a block statement. In this case the code between the braces is not a valid JavaScript code, so a SyntaxError gets thrown.\\n\\nThe following function would have returned an object:\\n\\nconst getUser = user => ({ name: user.name, age: user.age })\\n\\n",
      "code": "const getList = ([x, ...y]) => [x, y]\\nconst getUser = user => { name: user.name, age: user.age }\\n\\nconst list = [1, 2, 3, 4]\\nconst user = { name: \"\"Lydia\"\", age: 21 }\\n\\nconsole.log(getList(list))\\nconsole.log(getUser(user))",
      "correctOption": 0,
      "createdAt": "2023-06-26T14:00:02.536Z",
      "options": [
        {
          "S": "[1, [2, 3, 4]] and SyntaxError"
        },
        {
          "S": "[1, [2, 3, 4]] and { name: \"Lydia\", age: 21 }"
        },
        {
          "S": "[1, 2, 3, 4] and { name: \"Lydia\", age: 21 }"
        },
        {
          "S": "Error and { name: \"Lydia\", age: 21 }"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T14:00:02.536Z"
    },
    {
      "id": "6e8be600-2871-40db-91cf-fbd983e8998f",
      "__typename": "Question",
      "answer": "First, we declare a variable person with the value of an object that has a name property.\\n\\nThen, we declare a variable called members. We set the first element of that array equal to the value of the person variable. Objects interact by reference when setting them equal to each other. When you assign a reference from one variable to another, you make a copy of that reference. (Question that they don't have the same reference!)\\n\\nThen, we set the variable person equal to null.\\n\\n\\nWe are only modifying the value of the person variable, and not the first element in the array, since that element has a different (copied) reference to the object. The first element in members still holds its reference to the original object. When we log the members array, the first element still holds the value of the object, which gets logged.",
      "code": "let person = { name: 'Lydia' };\\nconst members = [person];\\nperson = null;\\n\\nconsole.log(members);",
      "correctOption": 3,
      "createdAt": "2023-06-26T13:32:12.813Z",
      "options": [
        {
          "S": "null"
        },
        {
          "S": "[null]"
        },
        {
          "S": "[{}]"
        },
        {
          "S": "[{ name: \"Lydia\" }]"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:32:12.813Z"
    },
    {
      "id": "527d4fff-6912-4a3d-9519-49d87eb310aa",
      "__typename": "Question",
      "answer": "We can delete properties from objects using the delete keyword, also on the prototype. By deleting a property on the prototype, it is not available anymore in the prototype chain. In this case, the bark function is not available anymore on the prototype after delete Dog.prototype.bark, yet we still try to access it.\\n\\nWhen we try to invoke something that is not a function, a TypeError is thrown. In this case TypeError: pet.bark is not a function, since pet.bark is undefined.",
      "code": "class Dog {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n}\\n\\nDog.prototype.bark = function() {\\n  console.log(`Woof I am ${this.name}`);\\n};\\n\\nconst pet = new Dog('Mara');\\n\\npet.bark();\\n\\ndelete Dog.prototype.bark;\\n\\npet.bark();",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:36:56.511Z",
      "options": [
        {
          "S": "\"Woof I am Mara\", TypeError"
        },
        {
          "S": "\"Woof I am Mara\", \"Woof I am Mara\""
        },
        {
          "S": "\"Woof I am Mara\", undefined"
        },
        {
          "S": "TypeError, TypeError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:36:56.511Z"
    },
    {
      "id": "f3d7abb9-eeac-4c4e-a93e-186e9cc42a6f",
      "__typename": "Question",
      "answer": "The .push() method returns the length of the new array! Previously, the array contained one element (the string \"\"banana\"\") and had a length of 1. After adding the string \"\"apple\"\" to the array, the array contains two elements, and has a length of 2. This gets returned from the addToList function.\\n\\nThe push method modifies the original array. If you wanted to return the array from the function rather than the length of the array, you should have returned list after pushing item to it.",
      "code": "function addToList(item, list) {\\n  return list.push(item);\\n}\\n\\nconst result = addToList('apple', ['banana']);\\nconsole.log(result);",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:47:14.190Z",
      "options": [
        {
          "S": "['apple', 'banana']"
        },
        {
          "S": "2"
        },
        {
          "S": "true"
        },
        {
          "S": "undefined"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:47:14.190Z"
    },
    {
      "id": "46e2f7f5-0e76-4016-ba28-f5a5083f6ff4",
      "__typename": "Question",
      "answer": "With the import keyword, all imported modules are pre-parsed. This means that the imported modules get run first, the code in the file which imports the module gets executed after.\\n\\nThis is a difference between require() in CommonJS and import! With require(), you can load dependencies on demand while the code is being run. If we would have used require instead of import, running index.js, running sum.js, 3 would have been logged to the console.",
      "code": "// index.js\\nconsole.log('running index.js');\\nimport { sum } from './sum.js';\\nconsole.log(sum(1, 2));\\n\\n// sum.js\\nconsole.log('running sum.js');\\nexport const sum = (a, b) => a + b;",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:43:36.934Z",
      "options": [
        {
          "S": "running index.js, running sum.js, 3"
        },
        {
          "S": "running sum.js, running index.js, 3"
        },
        {
          "S": "running sum.js, 3, running index.js"
        },
        {
          "S": "running index.js, undefined, running sum.js"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:43:36.934Z"
    },
    {
      "id": "c87341b6-5f1b-4a14-8c1b-9f8f0ce04cac",
      "__typename": "Question",
      "answer": "The value of the this keyword is dependent on where you use it. In a method, like the getStatus method, the this keyword refers to the object that the method belongs to. The method belongs to the data object, so this refers to the data object. When we log this.status, the status property on the data object gets logged, which is \"\"🥑\"\".\\n\\nWith the call method, we can change the object to which the this keyword refers. In functions, the this keyword refers to the the object that the function belongs to. We declared the setTimeout function on the global object, so within the setTimeout function, the this keyword refers to the global object. On the global object, there is a variable called status with the value of \"\"😎\"\". When logging this.status, \"\"😎\"\" gets logged.",
      "code": "var status = '😎';\\n\\nsetTimeout(() => {\\n  const status = '😍';\\n\\n  const data = {\\n    status: '🥑',\\n    getStatus() {\\n      return this.status;\\n    },\\n  };\\n\\n  console.log(data.getStatus());\\n  console.log(data.getStatus.call(this));\\n}, 0);",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:51:36.377Z",
      "options": [
        {
          "S": "\"🥑\" and \"😍\""
        },
        {
          "S": "\"🥑\" and \"😎\""
        },
        {
          "S": "\"😍\" and \"😎\""
        },
        {
          "S": "\"😎\" and \"😎\""
        }
      ],
      "points": 10,
      "question": "What is the output?",
      "updatedAt": "2023-06-26T13:51:36.377Z"
    },
    {
      "id": "b402fab8-69de-49d7-9bc3-6e0ff74e4a0b",
      "__typename": "Question",
      "answer": "The .push method returns the new length of the array, not the array itself! By setting newList equal to [1, 2, 3].push(4), we set newList equal to the new length of the array: 4.\\n\\nThen, we try to use the .push method on newList. Since newList is the numerical value 4, we cannot use the .push method: a TypeError is thrown.",
      "code": "let newList = [1, 2, 3].push(4);\\n\\nconsole.log(newList.push(5));",
      "correctOption": 3,
      "createdAt": "2023-06-26T13:56:43.934Z",
      "options": [
        {
          "S": "[1, 2, 3, 4, 5]"
        },
        {
          "S": "[1, 2, 3, 5]"
        },
        {
          "S": "[1, 2, 3, 4]"
        },
        {
          "S": "Error"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:56:43.934Z"
    },
    {
      "id": "d96a4c70-4dc0-4dec-87f1-97c7d2b57feb",
      "__typename": "Question",
      "answer": "The first argument that the reduce method receives is the accumulator, x in this case. The second argument is the current value, y. With the reduce method, we execute a callback function on every element in the array, which could ultimately result in one single value.\\n\\nIn this example, we are not returning any values, we are simply logging the values of the accumulator and the current value.\\n\\nThe value of the accumulator is equal to the previously returned value of the callback function. If you don't pass the optional initialValue argument to the reduce method, the accumulator is equal to the first element on the first call.\\n\\nOn the first call, the accumulator (x) is 1, and the current value (y) is 2. We don't return from the callback function, we log the accumulator and current value: 1 and 2 get logged.\\n\\nIf you don't return a value from a function, it returns undefined. On the next call, the accumulator is undefined, and the current value is 3. undefined and 3 get logged.\\n\\nOn the fourth call, we again don't return from the callback function. The accumulator is again undefined, and the current value is 4. undefined and 4 get logged.",
      "code": "[1, 2, 3, 4].reduce((x, y) => console.log(x, y));",
      "correctOption": 3,
      "createdAt": "2023-06-26T13:42:35.625Z",
      "options": [
        {
          "S": "1 2 and 3 3 and 6 4"
        },
        {
          "S": "1 2 and 2 3 and 3 4"
        },
        {
          "S": "1 undefined and 2 undefined and 3 undefined and 4 undefined"
        },
        {
          "S": "1 2 and undefined 3 and undefined 4"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:42:35.625Z"
    },
    {
      "id": "e8a7ff94-9195-476e-aa3e-8f7dac7fea25",
      "__typename": "Question",
      "answer": "Object keys are automatically converted into strings. We are trying to set an object as a key to object a, with the value of 123.\\n\\n    However, when we stringify an object, it becomes \"\"[object Object]\"\". So what we are saying here, is that a[\"\"[object Object]\"\"] = 123. Then, we can try to do the same again. c is another object that we are implicitly stringifying. So then, a[\"\"[object Object]\"\"] = 456.\\n    \\n    Then, we log a[b], which is actually a[\"\"[object Object]\"\"]. We just set that to 456, so it returns 456.\\n    \\n    ",
      "code": "const a = {};\\n    const b = { key: 'b' };\\n    const c = { key: 'c' };\\n    \\n    a[b] = 123;\\n    a[c] = 456;\\n    \\n    console.log(a[b]);",
      "correctOption": 1,
      "createdAt": "2023-06-26T10:39:06.116Z",
      "options": [
        {
          "S": "123"
        },
        {
          "S": "456"
        },
        {
          "S": "undefined"
        },
        {
          "S": "ReferenceError"
        }
      ],
      "points": 10,
      "question": " What's the output?",
      "updatedAt": "2023-06-26T10:39:06.116Z"
    },
    {
      "id": "28ffa2fe-dd29-433f-9726-2d5cfcead57e",
      "__typename": "Question",
      "answer": "In JavaScript, all objects interact by reference when setting them equal to each other.\\n\\n    First, variable c holds a value to an object. Later, we assign d with the same reference that c has to the object.\\n    \\n    When you change one object, you change all of them.",
      "code": "let c = { greeting: \"\"Hey!\"\" };\\n    let d;\\n    \\n    d = c;\\n    c.greeting = \"\"Hello\"\";\\n    console.log(d.greeting);",
      "correctOption": 0,
      "createdAt": "2023-06-26T10:44:29.276Z",
      "options": [
        {
          "S": "Hello"
        },
        {
          "S": "undefined"
        },
        {
          "S": "ReferenceError"
        },
        {
          "S": "TypeError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T10:44:29.276Z"
    },
    {
      "id": "44d3dbbe-ecbe-4f30-8629-0935ee02f21e",
      "__typename": "Question",
      "answer": "With the var keyword, you can declare multiple variables with the same name. The variable will then hold the latest value.\\n\\n    You cannot do this with let or const since they're block-scoped.",
      "code": "var num = 8;\\n    var num = 10;\\n    \\n    console.log(num);",
      "correctOption": 1,
      "createdAt": "2023-06-26T10:44:29.276Z",
      "options": [
        {
          "S": "8"
        },
        {
          "S": "10"
        },
        {
          "S": "SyntaxError"
        },
        {
          "S": "ReferenceError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T10:44:29.276Z"
    },
    {
      "id": "bfed0976-7745-4e51-80fe-5d8e6257ec83",
      "__typename": "Question",
      "answer": "With splice method, we modify the original array by deleting, replacing or adding elements. In this case, we removed 2 items from index 1 (we removed '🥑' and '😍') and added the ✨ emoji instead.\\n\\nmap, filter and slice return a new array, find returns an element, and reduce returns a reduced value.\\n\\n",
      "code": "const emojis = ['✨', '🥑', '😍'];\\n\\nemojis.map(x => x + '✨');\\nemojis.filter(x => x !== '🥑');\\nemojis.find(x => x !== '🥑');\\nemojis.reduce((acc, cur) => acc + '✨');\\nemojis.slice(1, 2, '✨');\\nemojis.splice(1, 2, '✨');",
      "correctOption": 3,
      "createdAt": "2023-06-28T14:10:17.974Z",
      "options": [
        {
          "S": "All of them"
        },
        {
          "S": "map reduce slice splice"
        },
        {
          "S": "map slice splice"
        },
        {
          "S": "splice"
        }
      ],
      "points": 10,
      "question": "Which of these methods modifies the original array?",
      "updatedAt": "2023-06-28T14:10:17.974Z"
    },
    {
      "id": "7c4f443e-f2d5-4ab3-ac00-9d093cd0898c",
      "__typename": "Question",
      "answer": "In a derived class, you cannot access the this keyword before calling super. If you try to do that, it will throw a ReferenceError: 1 and 4 would throw a reference error.\\n\\nWith the super keyword, we call that parent class's constructor with the given arguments. The parent's constructor receives the name argument, so we need to pass name to super.\\n\\nThe Labrador class receives two arguments, name since it extends Dog, and size as an extra property on the Labrador class. They both need to be passed to the constructor function on Labrador, which is done correctly using constructor 2.",
      "code": "class Dog {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n};\\n\\nclass Labrador extends Dog {\\n  // 1\\n  constructor(name, size) {\\n    this.size = size;\\n  }\\n  // 2\\n  constructor(name, size) {\\n    super(name);\\n    this.size = size;\\n  }\\n  // 3\\n  constructor(size) {\\n    super(name);\\n    this.size = size;\\n  }\\n  // 4\\n  constructor(name, size) {\\n    this.name = name;\\n    this.size = size;\\n  }\\n\\n};",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:42:58.221Z",
      "options": [
        {
          "S": "1"
        },
        {
          "S": "2"
        },
        {
          "S": "3"
        },
        {
          "S": "4"
        }
      ],
      "points": 10,
      "question": "With which constructor can we successfully extend the Dog class?",
      "updatedAt": "2023-06-26T13:42:58.221Z"
    },
    {
      "id": "fdee4c5d-08b1-4bd2-aca2-9c66341c0db8",
      "__typename": "Question",
      "answer": "The add function returns an arrow function, which returns an arrow function, which returns an arrow function (still with me?). The first function receives an argument x with the value of 4. We invoke the second function, which receives an argument y with the value 5. Then we invoke the third function, which receives an argument z with the value 6. When we're trying to access the value x, y and z within the last arrow function, the JS engine goes up the scope chain in order to find the values for x and y accordingly. This returns 4 5 6.",
      "code": "const add = x => y => z => {\\n  console.log(x, y, z);\\n  return x + y + z;\\n};\\n\\nadd(4)(5)(6);",
      "correctOption": 0,
      "createdAt": "2023-06-28T14:16:53.768Z",
      "options": [
        {
          "S": "4 5 6"
        },
        {
          "S": "6 5 4"
        },
        {
          "S": "4 function function"
        },
        {
          "S": "undefined undefined 6"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:16:53.768Z"
    },
    {
      "id": "2427b148-0fa1-466c-8624-3a8a6cb70b8e",
      "__typename": "Question",
      "answer": "Under the hood, emojis are unicodes. The unicodes for the heart emoji is \"\"U+2764 U+FE0F\"\". These are always the same for the same emojis, so we're comparing two equal strings to each other, which returns true.",
      "code": "console.log('❤️' === '❤️');",
      "correctOption": 0,
      "createdAt": "2023-06-28T14:09:48.246Z",
      "options": [
        {
          "S": "true"
        },
        {
          "S": "false"
        },
        {
          "S": ""
        },
        {
          "S": ""
        }
      ],
      "points": 10,
      "question": "What's its value?",
      "updatedAt": "2023-06-28T14:09:48.246Z"
    },
    {
      "id": "bb0edafa-d379-40b5-a1a7-97f6247ef10d",
      "__typename": "Question",
      "answer": "Variables declared with the const keyword are not referenceable before their initialization: this is called the temporal dead zone. In the getInfo function, the variable randomValue is scoped in the functional scope of getInfo. On the line where we want to log the value of typeof randomValue, the variable randomValue isn't initialized yet: a ReferenceError gets thrown! The engine didn't go down the scope chain since we declared the variable randomValue in the getInfo function.",
      "code": "const randomValue = 21;\\n\\nfunction getInfo() {\\n  console.log(typeof randomValue);\\n  const randomValue = 'Lydia Hallie';\\n}\\n\\ngetInfo();",
      "correctOption": 3,
      "createdAt": "2023-06-28T14:22:42.880Z",
      "options": [
        {
          "S": "\"number\""
        },
        {
          "S": "\"string\""
        },
        {
          "S": "undefined"
        },
        {
          "S": "ReferenceError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:22:42.880Z"
    },
    {
      "id": "0a68b3d9-9d46-4a8e-9941-ffa93df85dfc",
      "__typename": "Question",
      "answer": "Regular functions cannot be stopped mid-way after invocation. However, a generator function can be \"\"stopped\"\" midway, and later continue from where it stopped. Every time a generator function encounters a yield keyword, the function yields the value specified after it. Question that the generator function in that case doesn’t return the value, it yields the value.\\n\\nFirst, we initialize the generator function with i equal to 10. We invoke the generator function using the next() method. The first time we invoke the generator function, i is equal to 10. It encounters the first yield keyword: it yields the value of i. The generator is now \"\"paused\"\", and 10 gets logged.\\n\\nThen, we invoke the function again with the next() method. It starts to continue where it stopped previously, still with i equal to 10. Now, it encounters the next yield keyword, and yields i * 2. i is equal to 10, so it returns 10 * 2, which is 20. This results in 10, 20.\\n\\n",
      "code": "function* generator(i) {\\n  yield i;\\n  yield i * 2;\\n}\\n\\nconst gen = generator(10);\\n\\nconsole.log(gen.next().value);\\nconsole.log(gen.next().value);",
      "correctOption": 2,
      "createdAt": "2023-06-26T13:30:54.020Z",
      "options": [
        {
          "S": "[0, 10], [10, 20]"
        },
        {
          "S": "20, 20"
        },
        {
          "S": "10, 20"
        },
        {
          "S": "0, 10 and 10, 20"
        }
      ],
      "points": 10,
      "question": " What's the output?",
      "updatedAt": "2023-06-26T13:30:54.020Z"
    },
    {
      "id": "47591337-711d-47b5-84af-4b182cfeb0bd",
      "__typename": "Question",
      "answer": "It returns a unique id. This id can be used to clear that interval with the clearInterval() function.\\n\\n",
      "code": "setInterval(() => console.log('Hi'), 1000);",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:29:39.789Z",
      "options": [
        {
          "S": "a unique id"
        },
        {
          "S": "the amount of milliseconds specified"
        },
        {
          "S": "the passed function"
        },
        {
          "S": "undefined"
        }
      ],
      "points": 10,
      "question": "What does the setInterval method return in the browser?",
      "updatedAt": "2023-06-26T13:29:39.789Z"
    },
    {
      "id": "d32337e8-2d55-4a0f-9759-96d58156f4ec",
      "__typename": "Question",
      "answer": "Classes are syntactical sugar for function constructors. The equivalent of the Person class as a function constructor would be:\\n\\nfunction Person(name) {\\n  this.name = name;\\n}\\nCalling a function constructor with new results in the creation of an instance of Person, typeof keyword returns \"\"object\"\" for an instance. typeof member returns \"\"object\"\".\\n\\n",
      "code": "class Person {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n}\\n\\nconst member = new Person('John');\\nconsole.log(typeof member);",
      "correctOption": 2,
      "createdAt": "2023-06-26T13:56:20.046Z",
      "options": [
        {
          "S": "\"class\""
        },
        {
          "S": "\"function\""
        },
        {
          "S": "\"object\""
        },
        {
          "S": "\"string\""
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:56:20.046Z"
    },
    {
      "id": "bfc55c7e-8a5b-4111-9e09-e07cc7a5bc8d",
      "__typename": "Question",
      "answer": "We passed the condition groceries.indexOf(\"\"banana\"\") to the if-statement. groceries.indexOf(\"\"banana\"\") returns 0, which is a falsy value. Since the condition in the if-statement is falsy, the code in the else block runs, and We don't have to buy bananas! gets logged.",
      "code": "const groceries = ['banana', 'apple', 'peanuts'];\\n\\nif (groceries.indexOf('banana')) {\\n  console.log('We have to buy bananas!');\\n} else {\\n  console.log(`We don't have to buy bananas!`);\\n}",
      "correctOption": 1,
      "createdAt": "2023-06-28T14:15:39.530Z",
      "options": [
        {
          "S": "We have to buy bananas!"
        },
        {
          "S": "We don't have to buy bananas"
        },
        {
          "S": "undefined"
        },
        {
          "S": "1"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:15:39.530Z"
    },
    {
      "id": "f8989f31-caa5-4a40-98d3-327891de31f9",
      "__typename": "Question",
      "answer": "When adding a key/value pair using the set method, the key will be the value of the first argument passed to the set function, and the value will be the second argument passed to the set function. The key is the function () => 'greeting' in this case, and the value 'Hello world'. myMap is now { () => 'greeting' => 'Hello world!' }.\\n\\n1 is wrong, since the key is not 'greeting' but () => 'greeting'. 3 is wrong, since we're creating a new function by passing it as a parameter to the get method. Object interact by reference. Functions are objects, which is why two functions are never strictly equal, even if they are identical: they have a reference to a different spot in memory.",
      "code": "const myMap = new Map();\\nconst myFunc = () => 'greeting';\\n\\nmyMap.set(myFunc, 'Hello world!');\\n\\n//1\\nmyMap.get('greeting');\\n//2\\nmyMap.get(myFunc);\\n//3\\nmyMap.get(() => 'greeting');",
      "correctOption": 1,
      "createdAt": "2023-06-28T14:13:34.535Z",
      "options": [
        {
          "S": "1"
        },
        {
          "S": "2"
        },
        {
          "S": "2 and 3"
        },
        {
          "S": "All of them"
        }
      ],
      "points": 10,
      "question": "Which method(s) will return the value 'Hello world!'?",
      "updatedAt": "2023-06-28T14:13:34.535Z"
    },
    {
      "id": "e226ec23-c3eb-4130-8125-274fdfe77777",
      "__typename": "Question",
      "answer": "With the += operand, we're incrementing the value of num by 1. num had the initial value 1, so 1 + 1 is 2. The item on the second index in the list array is 🥰, console.log(list[2]) prints 🥰.",
      "code": "let num = 1;\\nconst list = ['🥳', '🤠', '🥰', '🤪'];\\n\\nconsole.log(list[(num += 1)]);",
      "correctOption": 1,
      "createdAt": "2023-06-28T14:14:50.925Z",
      "options": [
        {
          "S": "🤠"
        },
        {
          "S": "🥰"
        },
        {
          "S": "SyntaxError"
        },
        {
          "S": "ReferenceError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:14:50.925Z"
    },
    {
      "id": "724028a4-31ff-4168-bbf8-b6507e9493f3",
      "__typename": "Question",
      "answer": "With !!name, we determine whether the value of name is truthy or falsy. If name is truthy, which we want to test for, !name returns false. !false (which is what !!name practically is) returns true.\\n\\nBy setting hasName equal to name, you set hasName equal to whatever value you passed to the getName function, not the boolean value true.\\n\\nnew Boolean(true) returns an object wrapper, not the boolean value itself.\\n\\nname.length returns the length of the passed argument, not whether it's true.",
      "code": "function getName(name) {\\n  const hasName = //\\n}",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:54:16.863Z",
      "options": [
        {
          "S": "!!name"
        },
        {
          "S": "name"
        },
        {
          "S": "new Boolean(name)"
        },
        {
          "S": "name.length"
        }
      ],
      "points": 10,
      "question": "Which option is a way to set hasName equal to true, provided you cannot pass true as an argument?",
      "updatedAt": "2023-06-26T13:54:16.863Z"
    },
    {
      "id": "05dcb90f-05a2-4a5b-b4cd-bbe64ea97278",
      "__typename": "Question",
      "answer": "We can unpack values from arrays or properties from objects through destructuring. For example:\\n\\n[a, b] = [1, 2];\\n\\nThe value of a is now 1, and the value of b is now 2. What we actually did in the question, is:\\n\\n[y] = [1, 2, 3, 4, 5];\\n\\nThis means that the value of y is equal to the first value in the array, which is the number 1. When we log y, 1 is returned.",
      "code": "const numbers = [1, 2, 3, 4, 5];\\nconst [y] = numbers;\\n\\nconsole.log(y);",
      "correctOption": 2,
      "createdAt": "2023-06-26T13:39:15.623Z",
      "options": [
        {
          "S": "[[1, 2, 3, 4, 5]]"
        },
        {
          "S": "[1, 2, 3, 4, 5]"
        },
        {
          "S": "1"
        },
        {
          "S": "[1]"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:39:15.623Z"
    },
    {
      "id": "cd917b89-88ad-4afa-a352-ad3930917121",
      "__typename": "Question",
      "answer": "[] is a truthy value. With the && operator, the right-hand value will be returned if the left-hand value is a truthy value. In this case, the left-hand value [] is a truthy value, so \"\"Im' gets returned.\\n\\n\"\"\"\" is a falsy value. If the left-hand value is falsy, nothing gets returned. n't doesn't get returned.",
      "code": "// 🎉✨ This is my 100th question! ✨🎉\\n\\nconst output = `${[] && 'Im'}possible!\\nYou should${'' && `n't`} see a therapist after so much JavaScript lol`;",
      "correctOption": 1,
      "createdAt": "2023-06-26T14:00:57.782Z",
      "options": [
        {
          "S": "possible! You should see a therapist after so much JavaScript lol"
        },
        {
          "S": "Impossible! You should see a therapist after so much JavaScript lol"
        },
        {
          "S": "possible! You shouldn't see a therapist after so much JavaScript lol"
        },
        {
          "S": "Impossible! You shouldn't see a therapist after so much JavaScript lol"
        }
      ],
      "points": 10,
      "question": "What's the value of output?",
      "updatedAt": "2023-06-26T14:00:57.782Z"
    },
    {
      "id": "382bb790-40d5-4616-9efd-edea90c367cf",
      "__typename": "Question",
      "answer": "In the try block, we're logging the awaited value of the myPromise variable: \"\"Woah some cool data\"\". Since no errors were thrown in the try block, the code in the catch block doesn't run. The code in the finally block always runs, \"\"Oh finally!\"\" gets logged.",
      "code": "const myPromise = Promise.resolve('Woah some cool data');\\n\\n(async () => {\\n  try {\\n    console.log(await myPromise);\\n  } catch {\\n    throw new Error(`Oops didn't work`);\\n  } finally {\\n    console.log('Oh finally!');\\n  }\\n})();",
      "correctOption": 2,
      "createdAt": "2023-06-28T14:23:11.758Z",
      "options": [
        {
          "S": "Woah some cool data"
        },
        {
          "S": "Oh finally!"
        },
        {
          "S": "Woah some cool data Oh finally!"
        },
        {
          "S": "Oops didn't work Oh finally!"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:23:11.758Z"
    },
    {
      "id": "b55dae94-ff0c-4ce7-8f5b-3044833c8d25",
      "__typename": "Question",
      "answer": "The rest parameter (...args) lets us \"\"collect\"\" all remaining arguments into an array. An array is an object, so typeof args returns \"\"object\"\"\\n    ",
      "code": "function getAge(...args) {\\n      console.log(typeof args);\\n    }\\n    \\n    getAge(21);",
      "correctOption": 2,
      "createdAt": "2023-06-26T10:39:06.117Z",
      "options": [
        {
          "S": "\"number\""
        },
        {
          "S": "\"array\""
        },
        {
          "S": "\"object\""
        },
        {
          "S": "\"NaN\""
        }
      ],
      "points": 10,
      "question": " What's the output?",
      "updatedAt": "2023-06-26T10:39:06.117Z"
    },
    {
      "id": "efee4fbf-86df-4a87-924a-cb5b3071b4f1",
      "__typename": "Question",
      "answer": "When you return a property, the value of the property is equal to the returned value, not the value set in the constructor function. We return the string \"\"Maserati\"\", so myCar.make is equal to \"\"Maserati\"\".",
      "code": "function Car() {\\n  this.make = 'Lamborghini';\\n  return { make: 'Maserati' };\\n}\\n\\nconst myCar = new Car();\\nconsole.log(myCar.make);",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:35:52.952Z",
      "options": [
        {
          "S": "\"Lamborghini\""
        },
        {
          "S": "\"Maserati\""
        },
        {
          "S": "ReferenceError"
        },
        {
          "S": "TypeError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:35:52.952Z"
    },
    {
      "id": "329f606d-2187-4925-8fa5-a49c664d50c9",
      "__typename": "Question",
      "answer": "With a for-in loop, we can iterate through object keys, in this case name and age. Under the hood, object keys are strings (if they're not a Symbol). On every loop, we set the value of item equal to the current key it’s iterating over. First, item is equal to name, and gets logged. Then, item is equal to age, which gets logged.\\n\\n",
      "code": "const person = {\\n  name: 'Lydia',\\n  age: 21,\\n};\\n\\nfor (const item in person) {\\n  console.log(item);\\n}",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:32:50.843Z",
      "options": [
        {
          "S": "{ name: \"Lydia\" }, { age: 21 }"
        },
        {
          "S": "\"name\", \"age\""
        },
        {
          "S": "\"Lydia\", 21"
        },
        {
          "S": "[\"name\", \"Lydia\"], [\"age\", 21]"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:32:50.843Z"
    },
    {
      "id": "9ed58ea3-d795-4941-9327-9b6ad134868a",
      "__typename": "Question",
      "answer": "The + operator is not only used for adding numerical values, but we can also use it to concatenate strings. Whenever the JavaScript engine sees that one or more values are not a number, it coerces the number into a string.\\n\\nThe first one is 1, which is a numerical value. 1 + 2 returns the number 3.\\n\\nHowever, the second one is a string \"\"Lydia\"\". \"\"Lydia\"\" is a string and 2 is a number: 2 gets coerced into a string. \"\"Lydia\"\" and \"\"2\"\" get concatenated, which results in the string \"\"Lydia2\"\".\\n\\n{ name: \"\"Lydia\"\" } is an object. Neither a number nor an object is a string, so it stringifies both. Whenever we stringify a regular object, it becomes \"\"[object Object]\"\". \"\"[object Object]\"\" concatenated with \"\"2\"\" becomes \"\"[object Object]2\"\".\\n\\n",
      "code": "const set = new Set();\\n\\nset.add(1);\\nset.add('Lydia');\\nset.add({ name: 'Lydia' });\\n\\nfor (let item of set) {\\n  console.log(item + 2);\\n}",
      "correctOption": 2,
      "createdAt": "2023-06-28T00:38:20.120Z",
      "options": [
        {
          "S": "3, NaN, NaN"
        },
        {
          "S": "3, 7, NaN"
        },
        {
          "S": "3, Lydia2, [object Object]2"
        },
        {
          "S": "\"12\", Lydia2, [object Object]2"
        }
      ],
      "points": 10,
      "question": "What's the value of output?",
      "updatedAt": "2023-06-28T00:38:20.120Z"
    },
    {
      "id": "81bbee85-6e39-4e9b-9911-6138055909b0",
      "__typename": "Question",
      "answer": "The + operator is not only used for adding numerical values, but we can also use it to concatenate strings. Whenever the JavaScript engine sees that one or more values are not a number, it coerces the number into a string.\\n\\nThe first one is 1, which is a numerical value. 1 + 2 returns the number 3.\\n\\nHowever, the second one is a string \"\"Lydia\"\". \"\"Lydia\"\" is a string and 2 is a number: 2 gets coerced into a string. \"\"Lydia\"\" and \"\"2\"\" get concatenated, which results in the string \"\"Lydia2\"\".\\n\\n{ name: \"\"Lydia\"\" } is an object. Neither a number nor an object is a string, so it stringifies both. Whenever we stringify a regular object, it becomes \"\"[object Object]\"\". \"\"[object Object]\"\" concatenated with \"\"2\"\" becomes \"\"[object Object]2\"\".",
      "code": "const set = new Set();\\n\\nset.add(1);\\nset.add('Lydia');\\nset.add({ name: 'Lydia' });\\n\\nfor (let item of set) {\\n  console.log(item + 2);\\n}",
      "correctOption": 2,
      "createdAt": "2023-06-28T00:33:09.461Z",
      "options": [
        {
          "S": "3, NaN, NaN"
        },
        {
          "S": "3, 7, NaN"
        },
        {
          "S": "3, Lydia2, [object Object]2"
        },
        {
          "S": "\"12\", Lydia2, [object Object]2"
        }
      ],
      "points": 10,
      "question": "What's the value of output?",
      "updatedAt": "2023-06-28T00:33:09.461Z"
    },
    {
      "id": "162024b9-2e5e-4960-a417-686cae60f1a8",
      "__typename": "Question",
      "answer": "With the throw statement, we can create custom errors. With this statement, you can throw exceptions. An exception can be a string, a number, a boolean or an object. In this case, our exception is the string 'Hello world!'.\\n\\nWith the catch statement, we can specify what to do if an exception is thrown in the try block. An exception is thrown: the string 'Hello world!'. e is now equal to that string, which we log. This results in 'Oh an error: Hello world!'.",
      "code": "function greeting() {\\n  throw 'Hello world!';\\n}\\n\\nfunction sayHi() {\\n  try {\\n    const data = greeting();\\n    console.log('It worked!', data);\\n  } catch (e) {\\n    console.log('Oh no an error:', e);\\n  }\\n}\\n\\nsayHi();",
      "correctOption": 3,
      "createdAt": "2023-06-26T13:35:27.276Z",
      "options": [
        {
          "S": "It worked! Hello world!"
        },
        {
          "S": "Oh no an error: undefined"
        },
        {
          "S": "SyntaxError: can only throw Error objects"
        },
        {
          "S": "Oh no an error: Hello world!"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:35:27.276Z"
    },
    {
      "id": "cb44f7e2-7c47-4bb3-9ae5-010210a4da65",
      "__typename": "Question",
      "answer": "By default, arguments have the value of undefined, unless a value has been passed to the function. In this case, we didn't pass a value for the name argument. name is equal to undefined which gets logged.\\n\\nIn ES6, we can overwrite this default undefined value with default parameters. For example:\\n\\nfunction sayHi(name = \"\"Lydia\"\") { ... }\\n\\nIn this case, if we didn't pass a value or if we passed undefined, name would always be equal to the string Lydia",
      "code": "function sayHi(name) {\\n  return `Hi there, ${name}`;\\n}\\n\\nconsole.log(sayHi());",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:51:10.550Z",
      "options": [
        {
          "S": "Hi there,"
        },
        {
          "S": "Hi there, undefined"
        },
        {
          "S": "Hi there, null"
        },
        {
          "S": "ReferenceError"
        }
      ],
      "points": 10,
      "question": "What is the output?",
      "updatedAt": "2023-06-26T13:51:10.550Z"
    },
    {
      "id": "73328430-6285-4217-af40-6b07e774e0b5",
      "__typename": "Question",
      "answer": "new Number() is a built-in function constructor. Although it looks like a number, it's not really a number: it has a bunch of extra features and is an object.\\n\\n    When we use the == operator (Equality operator), it only checks whether it has the same value. They both have the value of 3, so it returns true.\\n    \\n    However, when we use the === operator (Strict equality operator), both value and type should be the same. It's not: new Number() is not a number, it's an object. Both return false.",
      "code": "let a = 3;\\n    let b = new Number(3);\\n    let c = 3;\\n    \\n    console.log(a == b);\\n    console.log(a === b);\\n    console.log(b === c);",
      "correctOption": 2,
      "createdAt": "2023-06-26T10:44:29.444Z",
      "options": [
        {
          "S": "true false true"
        },
        {
          "S": "false false true"
        },
        {
          "S": "true false false"
        },
        {
          "S": "false true true"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T10:44:29.444Z"
    },
    {
      "id": "c687e572-4bae-4dab-9502-0c2b7f8451a7",
      "__typename": "Question",
      "answer": "The colorChange function is static. Static methods are designed to live only on the constructor in which they are created, and cannot be passed down to any children or called upon class instances. Since freddie is an instance of class Chameleon, the function cannot be called upon it. A TypeError is thrown.",
      "code": "class Chameleon {\\n      static colorChange(newColor) {\\n        this.newColor = newColor;\\n        return this.newColor;\\n      }\\n    \\n      constructor({ newColor = 'green' } = {}) {\\n        this.newColor = newColor;\\n      }\\n    }\\n    \\n    const freddie = new Chameleon({ newColor: 'purple' });\\n    console.log(freddie.colorChange('orange'));",
      "correctOption": 3,
      "createdAt": "2023-06-26T10:44:29.467Z",
      "options": [
        {
          "S": "orange"
        },
        {
          "S": "purple"
        },
        {
          "S": "green"
        },
        {
          "S": "TypeError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T10:44:29.467Z"
    },
    {
      "id": "d819d638-a529-4983-b168-38ecc066a096",
      "__typename": "Question",
      "answer": "If you have two keys with the same name, the key will be replaced. It will still be in its first position, but with the last specified value.",
      "code": "const obj = { a: 'one', b: 'two', a: 'three' };\\n    console.log(obj);",
      "correctOption": 2,
      "createdAt": "2023-06-26T10:39:06.127Z",
      "options": [
        {
          "S": "{ a: \"one\", b: \"two\" }"
        },
        {
          "S": "{ b: \"two\", a: \"three\" }"
        },
        {
          "S": "{ a: \"three\", b: \"two\" }"
        },
        {
          "S": "SyntaxError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T10:39:06.127Z"
    },
    {
      "id": "dae5faa6-1867-4364-807c-34bc39e87b5b",
      "__typename": "Question",
      "answer": "Arguments are passed by value, unless their value is an object, then they're passed by reference. birthYear is passed by value, since it's a string, not an object. When we pass arguments by value, a copy of that value is created (see question 46).\\n\\nThe variable birthYear has a reference to the value \"\"1997\"\". The argument year also has a reference to the value \"\"1997\"\", but it's not the same value as birthYear has a reference to. When we update the value of year by setting year equal to \"\"1998\"\", we are only updating the value of year. birthYear is still equal to \"\"1997\"\".\\n\\nThe value of person is an object. The argument member has a (copied) reference to the same object. When we modify a property of the object member has a reference to, the value of person will also be modified, since they both have a reference to the same object. person's name property is now equal to the value \"\"Lydia\"\"",
      "code": "function getInfo(member, year) {\\n  member.name = 'Lydia';\\n  year = '1998';\\n}\\n\\nconst person = { name: 'Sarah' };\\nconst birthYear = '1997';\\n\\ngetInfo(person, birthYear);\\n\\nconsole.log(person, birthYear);",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:34:57.188Z",
      "options": [
        {
          "S": "{ name: \"Lydia\" }, \"1997\""
        },
        {
          "S": "{ name: \"Sarah\" }, \"1998\""
        },
        {
          "S": "{ name: \"Lydia\" }, \"1998\""
        },
        {
          "S": "{ name: \"Sarah\" }, \"1997\""
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:34:57.188Z"
    },
    {
      "id": "cf4a2b6d-392b-40b8-b5b3-43126f1bcb36",
      "__typename": "Question",
      "answer": "String is a built-in constructor, which we can add properties to. I just added a method to its prototype. Primitive strings are automatically converted into a string object, generated by the string prototype function. So, all strings (string objects) have access to that method!",
      "code": "String.prototype.giveLydiaPizza = () => {\\n      return 'Just give Lydia pizza already!';\\n    };\\n    \\n    const name = 'Lydia';\\n    \\n    console.log(name.giveLydiaPizza())",
      "correctOption": 0,
      "createdAt": "2023-06-26T10:39:06.133Z",
      "options": [
        {
          "S": "\"Just give Lydia pizza already!\""
        },
        {
          "S": "TypeError: not a function"
        },
        {
          "S": "SyntaxError"
        },
        {
          "S": "undefined"
        }
      ],
      "points": 10,
      "question": " What's the output?",
      "updatedAt": "2023-06-26T10:39:06.133Z"
    },
    {
      "id": "930c262e-0b21-4f85-87fb-03f436fbe147",
      "__typename": "Question",
      "answer": "With a promise, we basically say I want to execute this function, but I'll put it aside for now while it's running since this might take a while. Only when a certain value is resolved (or rejected), and when the call stack is empty, I want to use this value.\\n\\nWe can get this value with both .then and the await keyword in an async function. Although we can get a promise's value with both .then and await, they work a bit differently.\\n\\nIn the firstFunction, we (sort of) put the myPromise function aside while it was running, but continued running the other code, which is console.log('second') in this case. Then, the function resolved with the string I have resolved, which then got logged after it saw that the callstack was empty.\\n\\nWith the await keyword in secondFunction, we literally pause the execution of an async function until the value has been resolved before moving to the next line.\\n\\nThis means that it waited for the myPromise to resolve with the value I have resolved, and only once that happened, we moved to the next line: second got logged.",
      "code": "const myPromise = () => Promise.resolve('I have resolved!');\\n\\nfunction firstFunction() {\\n  myPromise().then(res => console.log(res));\\n  console.log('second');\\n}\\n\\nasync function secondFunction() {\\n  console.log(await myPromise());\\n  console.log('second');\\n}\\n\\nfirstFunction();\\nsecondFunction();",
      "correctOption": 3,
      "createdAt": "2023-06-28T00:27:37.681Z",
      "options": [
        {
          "S": "I have resolved!, second and I have resolved!, second"
        },
        {
          "S": "second, I have resolved! and second, I have resolved!"
        },
        {
          "S": "I have resolved!, second and second, I have resolved!"
        },
        {
          "S": "second, I have resolved! and I have resolved!, second"
        }
      ],
      "points": 10,
      "question": "What's the value of output?",
      "updatedAt": "2023-06-28T00:27:37.681Z"
    },
    {
      "id": "0236deca-8829-43a2-b4a8-fd3e28698198",
      "__typename": "Question",
      "answer": "When testing equality, primitives are compared by their value, while objects are compared by their reference. JavaScript checks if the objects have a reference to the same location in memory.\\n\\n    The two objects that we are comparing don't have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.\\n    \\n    This is why both { age: 18 } === { age: 18 } and { age: 18 } == { age: 18 } return false.",
      "code": "function checkAge(data) {\\n      if (data === { age: 18 }) {\\n        console.log('You are an adult!');\\n      } else if (data == { age: 18 }) {\\n        console.log('You are still an adult.');\\n      } else {\\n        console.log('Hmm.. You don't have an age I guess');\\n      }\\n    }\\n    \\n    checkAge({ age: 18 });",
      "correctOption": 2,
      "createdAt": "2023-06-26T10:44:29.277Z",
      "options": [
        {
          "S": "You are an adult!"
        },
        {
          "S": "You are still an adult."
        },
        {
          "S": "Hmm.. You don't have an age I guess"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T10:44:29.277Z"
    },
    {
      "id": "1756bd02-ccbe-4a7f-9b94-ef0c5dc76063",
      "__typename": "Question",
      "answer": "myFunc expects an object with properties x, y and z as its argument. Since we're only passing three separate numeric values (1, 2, 3) instead of one object with properties x, y and z ({x: 1, y: 2, z: 3}), x, y and z have their default value of undefined.\\n\\n",
      "code": "const myFunc = ({ x, y, z }) => {\\n  console.log(x, y, z);\\n};\\n\\nmyFunc(1, 2, 3);",
      "correctOption": 3,
      "createdAt": "2023-06-28T14:20:58.973Z",
      "options": [
        {
          "S": "1 2 3"
        },
        {
          "S": "{1: 1} {2: 2} {3: 3}"
        },
        {
          "S": "{ 1: undefined } undefined undefined"
        },
        {
          "S": "undefined undefined undefined"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:20:58.973Z"
    },
    {
      "id": "92281e95-f48e-4c4e-9392-0c8f77b848e5",
      "__typename": "Question",
      "answer": "The data stored in sessionStorage is removed after closing the tab.\\n\\n    If you used localStorage, the data would've been there forever, unless for example localStorage.clear() is invoked.",
      "code": "sessionStorage.setItem('cool_secret', 123);",
      "correctOption": 1,
      "createdAt": "2023-06-26T10:39:06.110Z",
      "options": [
        {
          "S": "Forever, the data doesn't get lost."
        },
        {
          "S": "When the user closes the tab."
        },
        {
          "S": "When the user closes the entire browser, not only the tab."
        },
        {
          "S": "When the user shuts off their computer."
        }
      ],
      "points": 10,
      "question": "How long is cool_secret accessible?",
      "updatedAt": "2023-06-26T10:39:06.110Z"
    },
    {
      "id": "ee87853b-0275-4873-8696-0b6bd37ad20e",
      "__typename": "Question",
      "answer": "Each function has its own execution context (or scope). The getName function first looks within its own context (scope) to see if it contains the variable name we're trying to access. In this case, the getName function contains its own name variable: we declare the variable name with the let keyword, and with the value of 'Sarah'.\\n\\nVariables with the let keyword (and const) are hoisted, but unlike var, don't get initialized. They are not accessible before the line we declare (initialize) them. This is called the \"\"temporal dead zone\"\". When we try to access the variables before they are declared, JavaScript throws a ReferenceError.\\n\\nIf we wouldn't have declared the name variable within the getName function, the javascript engine would've looked down the scope chain. The outer scope has a variable called name with the value of Lydia. In that case, it would've logged Lydia.\\n\\nlet name = 'Lydia';\\n\\nfunction getName() {\\n  console.log(name);\\n}\\n\\ngetName(); // Lydia\\n",
      "code": "let name = 'Lydia';\\n\\nfunction getName() {\\n  console.log(name);\\n  let name = 'Sarah';\\n}\\n\\ngetName();",
      "correctOption": 3,
      "createdAt": "2023-06-28T14:11:45.942Z",
      "options": [
        {
          "S": "Lydia"
        },
        {
          "S": "Sarah"
        },
        {
          "S": "undefined"
        },
        {
          "S": "ReferenceError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:11:45.942Z"
    },
    {
      "id": "7fdb7188-6ea6-4607-a7b3-8c6527d06cec",
      "__typename": "Question",
      "answer": "Object.entries(person) returns an array of nested arrays, containing the keys and objects:\\n\\n[ [ 'name', 'Lydia' ], [ 'age', 21 ] ]\\n\\nUsing the for-of loop, we can iterate over each element in the array, the subarrays in this case. We can destructure the subarrays instantly in the for-of loop, using const [x, y]. x is equal to the first element in the subarray, y is equal to the second element in the subarray.\\n\\nThe first subarray is [ \"\"name\"\", \"\"Lydia\"\" ], with x equal to \"\"name\"\", and y equal to \"\"Lydia\"\", which get logged. The second subarray is [ \"\"age\"\", 21 ], with x equal to \"\"age\"\", and y equal to 21, which get logged.\\n\\n",
      "code": "const person = {\\n  name: 'Lydia',\\n  age: 21,\\n};\\n\\nfor (const [x, y] of Object.entries(person)) {\\n  console.log(x, y);\\n}",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:57:48.749Z",
      "options": [
        {
          "S": "name Lydia and age 21"
        },
        {
          "S": "[\"name\", \"Lydia\"] and [\"age\", 21]"
        },
        {
          "S": "[\"name\", \"age\"] and undefined"
        },
        {
          "S": "Error"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:57:48.749Z"
    },
    {
      "id": "b55d5f92-7003-4256-a0be-db1bc4e4f0c6",
      "__typename": "Question",
      "answer": "We can set classes equal to other classes/function constructors. In this case, we set Person equal to AnotherPerson. The name on this constructor is Sarah, so the name property on the new Person instance member is \"\"Sarah\"\".",
      "code": "class Person {\\n  constructor() {\\n    this.name = 'Lydia';\\n  }\\n}\\n\\nPerson = class AnotherPerson {\\n  constructor() {\\n    this.name = 'Sarah';\\n  }\\n};\\n\\nconst member = new Person();\\nconsole.log(member.name);",
      "correctOption": 1,
      "createdAt": "2023-06-26T13:59:10.973Z",
      "options": [
        {
          "S": "\"Lydia\""
        },
        {
          "S": "\"Sarah\""
        },
        {
          "S": "Error: cannot redeclare Person"
        },
        {
          "S": "SyntaxError"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T13:59:10.973Z"
    },
    {
      "id": "d08646f3-5da2-408f-8258-fa5f5a623576",
      "__typename": "Question",
      "answer": "Variables with the const and let keyword are block-scoped. A block is anything between curly brackets ({ }). In this case, the curly brackets of the if/else statements. You cannot reference a variable outside of the block it's declared in, a ReferenceError gets thrown.\\n\\n",
      "code": "function checkAge(age) {\\n  if (age < 18) {\\n    const message = \"\"Sorry, you're too young.\"\";\\n  } else {\\n    const message = \"\"Yay! You're old enough!\"\";\\n  }\\n\\n  return message;\\n}\\n\\nconsole.log(checkAge(21));",
      "correctOption": 2,
      "createdAt": "2023-06-26T13:52:30.398Z",
      "options": [
        {
          "S": "\"Sorry, you're too young.\""
        },
        {
          "S": "\"Yay! You're old enough!\""
        },
        {
          "S": "ReferenceError"
        },
        {
          "S": "undefined"
        }
      ],
      "points": 10,
      "question": "What is the output?",
      "updatedAt": "2023-06-26T13:52:30.398Z"
    },
    {
      "id": "1f92fee0-9ab0-437e-af93-604096273349",
      "__typename": "Question",
      "answer": "Question that the value of diameter is a regular function, whereas the value of perimeter is an arrow function.\\n\\n    With arrow functions, the this keyword refers to its current surrounding scope, unlike regular functions! This means that when we call perimeter, it doesn't refer to the shape object, but to its surrounding scope (window for example).\\n    \\n    There is no value radius on that object, which returns NaN.",
      "code": "const shape = {\\n      radius: 10,\\n      diameter() {\\n        return this.radius * 2;\\n      },\\n      perimeter: () => 2 * Math.PI * this.radius\\n    };\\n    \\n    shape.diameter();\\n    shape.perimeter();",
      "correctOption": 2,
      "createdAt": "2023-06-26T10:39:06.114Z",
      "options": [
        {
          "S": "20 and 62.83185307179586"
        },
        {
          "S": "20 and NaN"
        },
        {
          "S": "20 and 63"
        },
        {
          "S": "NaN and 63"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T10:39:06.114Z"
    },
    {
      "id": "90813d5d-5ab2-4bd4-8867-16405ec7c0f8",
      "__typename": "Question",
      "answer": "A string is an iterable. The spread operator maps every character of an iterable to one element.",
      "code": "[...'Lydia'];",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:30:20.722Z",
      "options": [
        {
          "S": "[\"L\", \"y\", \"d\", \"i\", \"a\"]"
        },
        {
          "S": "[\"Lydia\"]"
        },
        {
          "S": "[[], \"Lydia\"]"
        },
        {
          "S": "[[\"L\", \"y\", \"d\", \"i\", \"a\"]]"
        }
      ],
      "points": 10,
      "question": "What does this return?",
      "updatedAt": "2023-06-26T13:30:20.722Z"
    },
    {
      "id": "fb4e4548-9bb3-4578-8b86-5539f18ff4f3",
      "__typename": "Question",
      "answer": "JavaScript is a dynamically typed language: we don't specify what types certain variables are. Values can automatically be converted into another type without you knowing, which is called implicit type coercion. Coercion is converting from one type into another.\\n\\n    In this example, JavaScript converts the number 1 into a string, in order for the function to make sense and return a value. During the addition of a numeric type (1) and a string type ('2'), the number is treated as a string. We can concatenate strings like \"\"Hello\"\" + \"\"World\"\", so what's happening here is \"\"1\"\" + \"\"2\"\" which returns \"\"12\"\".\\n    \\n    ",
      "code": "function sum(a, b) {\\n      return a + b;\\n    }\\n    \\n    sum(1, '2');",
      "correctOption": 2,
      "createdAt": "2023-06-26T10:39:06.120Z",
      "options": [
        {
          "S": "NaN"
        },
        {
          "S": "TypeError"
        },
        {
          "S": "12"
        },
        {
          "S": "3"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T10:39:06.120Z"
    },
    {
      "id": "e404ea2d-6521-4cb9-80b7-b0d41b25c5e8",
      "__typename": "Question",
      "answer": "This is possible in JavaScript, because functions are objects! (Everything besides primitive types are objects)\\n\\n    A function is a special type of object. The code you write yourself isn't the actual function. The function is an object with properties. This property is invocable.",
      "code": "function bark() {\\n      console.log('Woof!');\\n    }\\n    \\n    bark.animal = 'dog';",
      "correctOption": 0,
      "createdAt": "2023-06-26T10:44:29.271Z",
      "options": [
        {
          "S": "Nothing, this is totally fine!"
        },
        {
          "S": "SyntaxError. You cannot add properties to a function this way."
        },
        {
          "S": "'Woof' gets logged."
        },
        {
          "S": "ReferenceError"
        }
      ],
      "points": 10,
      "question": "What happens when we do this?",
      "updatedAt": "2023-06-26T10:44:29.271Z"
    },
    {
      "id": "1448621a-a1b1-4e0b-be1f-d6ffd5587420",
      "__typename": "Question",
      "answer": "With a for-in loop, we can iterate over enumerable properties. In an array, the enumerable properties are the \"\"keys\"\" of array elements, which are actually their indexes. You could see an array as:\\n\\n{0: \"\"☕\"\", 1: \"\"💻\"\", 2: \"\"🍷\"\", 3: \"\"🍫\"\"}\\n\\nWhere the keys are the enumerable properties. 0 1 2 3 get logged.\\n\\nWith a for-of loop, we can iterate over iterables. An array is an iterable. When we iterate over the array, the variable \"\"item\"\" is equal to the element it's currently iterating over, \"\"☕\"\" \"\"💻\"\" \"\"🍷\"\" \"\"🍫\"\" get logged.",
      "code": "const myLifeSummedUp = ['☕', '💻', '🍷', '🍫'];\\n\\nfor (let item in myLifeSummedUp) {\\n  console.log(item);\\n}\\n\\nfor (let item of myLifeSummedUp) {\\n  console.log(item);\\n}",
      "correctOption": 0,
      "createdAt": "2023-06-26T13:50:18.361Z",
      "options": [
        {
          "S": "0 1 2 3 and \"☕\" \"💻\" \"🍷\" \"🍫\""
        },
        {
          "S": "\"☕\" \"💻\" \"🍷\" \"🍫\" and \"☕\" \"💻\" \"🍷\" \"🍫\""
        },
        {
          "S": "\"☕\" \"💻\" \"🍷\" \"🍫\" and 0 1 2 3"
        },
        {
          "S": "0 1 2 3 and {0: \"☕\", 1: \"💻\", 2: \"🍷\", 3: \"🍫\"}"
        }
      ],
      "points": 10,
      "question": "What is the output?",
      "updatedAt": "2023-06-26T13:50:18.361Z"
    },
    {
      "id": "d16fb413-52fd-413b-8baa-cdf865666e8f",
      "__typename": "Question",
      "answer": "With the Number.isNaN method, you can check if the value you pass is a numeric value and equal to NaN. name is not a numeric value, so Number.isNaN(name) returns false. age is a numeric value, but is not equal to NaN, so Number.isNaN(age) returns false.\\n\\nWith the isNaN method, you can check if the value you pass is not a number. name is not a number, so isNaN(name) returns true. age is a number, so isNaN(age) returns false.",
      "code": "const name = 'Lydia Hallie';\\nconst age = 21;\\n\\nconsole.log(Number.isNaN(name));\\nconsole.log(Number.isNaN(age));\\n\\nconsole.log(isNaN(name));\\nconsole.log(isNaN(age));",
      "correctOption": 2,
      "createdAt": "2023-06-28T14:22:19.478Z",
      "options": [
        {
          "S": "true false true false"
        },
        {
          "S": "true false false false"
        },
        {
          "S": "false false true false"
        },
        {
          "S": "false true false true"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-28T14:22:19.478Z"
    },
    {
      "id": "c89ce9dd-c990-44f2-aaad-83c179fbe270",
      "__typename": "Question",
      "answer": "The continue statement skips an iteration if a certain condition returns true.",
      "code": "for (let i = 1; i < 5; i++) {\\n      if (i === 3) continue;\\n      console.log(i);\\n    }",
      "correctOption": 2,
      "createdAt": "2023-06-26T10:39:06.114Z",
      "options": [
        {
          "S": "1 2"
        },
        {
          "S": "1 2 3"
        },
        {
          "S": "1 2 4"
        },
        {
          "S": "1 3 4"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T10:39:06.114Z"
    },
    {
      "id": "7320a109-10fb-440e-9199-d4fdf537d532",
      "__typename": "Question",
      "answer": "The variable name holds the value of a string, which is not a function, thus cannot invoke.\\n\\nTypeErrors get thrown when a value is not of the expected type. JavaScript expected name to be a function since we're trying to invoke it. It was a string however, so a TypeError gets thrown: name is not a function!\\n\\nSyntaxErrors get thrown when you've written something that isn't valid JavaScript, for example when you've written the word return as retrun. ReferenceErrors get thrown when JavaScript isn't able to find a reference to a value that you're trying to access.",
      "code": "const name = 'Lydia';\\n\\nconsole.log(name());",
      "correctOption": 2,
      "createdAt": "2023-06-26T14:00:24.562Z",
      "options": [
        {
          "S": "SyntaxError"
        },
        {
          "S": "ReferenceError"
        },
        {
          "S": "TypeError"
        },
        {
          "S": "undefined"
        }
      ],
      "points": 10,
      "question": "What's the output?",
      "updatedAt": "2023-06-26T14:00:24.562Z"
    },
    {
      "question": "Que vino antes el huevo o la gallina?",
      "options": [
        {
          "S": "El huevo"
        },
        {
          "S": "La Gallina"
        }
      ],
      "correctOption": 1,
      "points": 10,
      "code": "Ninguno",
      "answer": "Pues no se sabe aun",
      "id": "e727c777-1f8b-4fe5-8f24-f2ba49c41c1d",
      "__typename": "Question",
      "createdAt": "7/4/2023, 11:41:46 AM",
      "updatedAt": "4/7/2023, 15:29:17"
    }
  ]
}